// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vme.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vmdProto {

namespace {

const ::google::protobuf::Descriptor* vec2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vec2_reflection_ = NULL;
const ::google::protobuf::Descriptor* vec3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vec3_reflection_ = NULL;
const ::google::protobuf::Descriptor* vec4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vec4_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* IDTag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IDTag_reflection_ = NULL;
const ::google::protobuf::Descriptor* BezInterpolParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BezInterpolParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoneFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoneFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* MorphFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MorphFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* LightFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LightFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelfShadowFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelfShadowFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* IKInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IKInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowIKFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowIKFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoneFrameTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoneFrameTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* MorphFrameTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MorphFrameTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraFrameTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraFrameTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* LightFrameTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LightFrameTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelfShadowFrameTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelfShadowFrameTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* VocaloidMotionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VocaloidMotionData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vme_2eproto() {
  protobuf_AddDesc_vme_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vme.proto");
  GOOGLE_CHECK(file != NULL);
  vec2_descriptor_ = file->message_type(0);
  static const int vec2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec2, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec2, y_),
  };
  vec2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vec2_descriptor_,
      vec2::default_instance_,
      vec2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vec2));
  vec3_descriptor_ = file->message_type(1);
  static const int vec3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec3, z_),
  };
  vec3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vec3_descriptor_,
      vec3::default_instance_,
      vec3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vec3));
  vec4_descriptor_ = file->message_type(2);
  static const int vec4_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec4, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec4, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec4, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec4, w_),
  };
  vec4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vec4_descriptor_,
      vec4::default_instance_,
      vec4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vec4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vec4));
  Header_descriptor_ = file->message_type(3);
  static const int Header_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, versioninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, modelinfo_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  IDTag_descriptor_ = file->message_type(4);
  static const int IDTag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDTag, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDTag, name_),
  };
  IDTag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IDTag_descriptor_,
      IDTag::default_instance_,
      IDTag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDTag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IDTag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IDTag));
  BezInterpolParams_descriptor_ = file->message_type(5);
  static const int BezInterpolParams_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BezInterpolParams, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BezInterpolParams, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BezInterpolParams, y1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BezInterpolParams, y2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BezInterpolParams, z1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BezInterpolParams, z2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BezInterpolParams, r1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BezInterpolParams, r2_),
  };
  BezInterpolParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BezInterpolParams_descriptor_,
      BezInterpolParams::default_instance_,
      BezInterpolParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BezInterpolParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BezInterpolParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BezInterpolParams));
  BoneFrame_descriptor_ = file->message_type(6);
  static const int BoneFrame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoneFrame, framenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoneFrame, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoneFrame, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoneFrame, interpolparameters_),
  };
  BoneFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoneFrame_descriptor_,
      BoneFrame::default_instance_,
      BoneFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoneFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoneFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoneFrame));
  MorphFrame_descriptor_ = file->message_type(7);
  static const int MorphFrame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphFrame, framenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphFrame, value_),
  };
  MorphFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MorphFrame_descriptor_,
      MorphFrame::default_instance_,
      MorphFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MorphFrame));
  CameraFrame_descriptor_ = file->message_type(8);
  static const int CameraFrame_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFrame, framenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFrame, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFrame, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFrame, interpolparameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFrame, viewangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFrame, perspective_),
  };
  CameraFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraFrame_descriptor_,
      CameraFrame::default_instance_,
      CameraFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraFrame));
  LightFrame_descriptor_ = file->message_type(9);
  static const int LightFrame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightFrame, framenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightFrame, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightFrame, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightFrame, position_),
  };
  LightFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LightFrame_descriptor_,
      LightFrame::default_instance_,
      LightFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LightFrame));
  SelfShadowFrame_descriptor_ = file->message_type(10);
  static const int SelfShadowFrame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfShadowFrame, framenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfShadowFrame, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfShadowFrame, distance_),
  };
  SelfShadowFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelfShadowFrame_descriptor_,
      SelfShadowFrame::default_instance_,
      SelfShadowFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfShadowFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfShadowFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelfShadowFrame));
  IKInfo_descriptor_ = file->message_type(11);
  static const int IKInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKInfo, ison_),
  };
  IKInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IKInfo_descriptor_,
      IKInfo::default_instance_,
      IKInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IKInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IKInfo));
  ShowIKFrame_descriptor_ = file->message_type(12);
  static const int ShowIKFrame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowIKFrame, frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowIKFrame, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowIKFrame, ikinfo_),
  };
  ShowIKFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShowIKFrame_descriptor_,
      ShowIKFrame::default_instance_,
      ShowIKFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowIKFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowIKFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShowIKFrame));
  BoneFrameTable_descriptor_ = file->message_type(13);
  static const int BoneFrameTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoneFrameTable, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoneFrameTable, frames_),
  };
  BoneFrameTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoneFrameTable_descriptor_,
      BoneFrameTable::default_instance_,
      BoneFrameTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoneFrameTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoneFrameTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoneFrameTable));
  MorphFrameTable_descriptor_ = file->message_type(14);
  static const int MorphFrameTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphFrameTable, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphFrameTable, frames_),
  };
  MorphFrameTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MorphFrameTable_descriptor_,
      MorphFrameTable::default_instance_,
      MorphFrameTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphFrameTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MorphFrameTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MorphFrameTable));
  CameraFrameTable_descriptor_ = file->message_type(15);
  static const int CameraFrameTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFrameTable, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFrameTable, frames_),
  };
  CameraFrameTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraFrameTable_descriptor_,
      CameraFrameTable::default_instance_,
      CameraFrameTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFrameTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFrameTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraFrameTable));
  LightFrameTable_descriptor_ = file->message_type(16);
  static const int LightFrameTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightFrameTable, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightFrameTable, frames_),
  };
  LightFrameTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LightFrameTable_descriptor_,
      LightFrameTable::default_instance_,
      LightFrameTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightFrameTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightFrameTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LightFrameTable));
  SelfShadowFrameTable_descriptor_ = file->message_type(17);
  static const int SelfShadowFrameTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfShadowFrameTable, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfShadowFrameTable, frames_),
  };
  SelfShadowFrameTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelfShadowFrameTable_descriptor_,
      SelfShadowFrameTable::default_instance_,
      SelfShadowFrameTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfShadowFrameTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelfShadowFrameTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelfShadowFrameTable));
  VocaloidMotionData_descriptor_ = file->message_type(18);
  static const int VocaloidMotionData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocaloidMotionData, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocaloidMotionData, boneidtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocaloidMotionData, morphidtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocaloidMotionData, cameraidtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocaloidMotionData, lightidtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocaloidMotionData, selfshadowidtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocaloidMotionData, boneframetables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocaloidMotionData, morphframetables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocaloidMotionData, cameraframetables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocaloidMotionData, lightframetables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocaloidMotionData, selfshadowframetables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocaloidMotionData, showikframes_),
  };
  VocaloidMotionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VocaloidMotionData_descriptor_,
      VocaloidMotionData::default_instance_,
      VocaloidMotionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocaloidMotionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VocaloidMotionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VocaloidMotionData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vme_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vec2_descriptor_, &vec2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vec3_descriptor_, &vec3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vec4_descriptor_, &vec4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IDTag_descriptor_, &IDTag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BezInterpolParams_descriptor_, &BezInterpolParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoneFrame_descriptor_, &BoneFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MorphFrame_descriptor_, &MorphFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraFrame_descriptor_, &CameraFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LightFrame_descriptor_, &LightFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelfShadowFrame_descriptor_, &SelfShadowFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IKInfo_descriptor_, &IKInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShowIKFrame_descriptor_, &ShowIKFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoneFrameTable_descriptor_, &BoneFrameTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MorphFrameTable_descriptor_, &MorphFrameTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraFrameTable_descriptor_, &CameraFrameTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LightFrameTable_descriptor_, &LightFrameTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelfShadowFrameTable_descriptor_, &SelfShadowFrameTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VocaloidMotionData_descriptor_, &VocaloidMotionData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vme_2eproto() {
  delete vec2::default_instance_;
  delete vec2_reflection_;
  delete vec3::default_instance_;
  delete vec3_reflection_;
  delete vec4::default_instance_;
  delete vec4_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
  delete IDTag::default_instance_;
  delete IDTag_reflection_;
  delete BezInterpolParams::default_instance_;
  delete BezInterpolParams_reflection_;
  delete BoneFrame::default_instance_;
  delete BoneFrame_reflection_;
  delete MorphFrame::default_instance_;
  delete MorphFrame_reflection_;
  delete CameraFrame::default_instance_;
  delete CameraFrame_reflection_;
  delete LightFrame::default_instance_;
  delete LightFrame_reflection_;
  delete SelfShadowFrame::default_instance_;
  delete SelfShadowFrame_reflection_;
  delete IKInfo::default_instance_;
  delete IKInfo_reflection_;
  delete ShowIKFrame::default_instance_;
  delete ShowIKFrame_reflection_;
  delete BoneFrameTable::default_instance_;
  delete BoneFrameTable_reflection_;
  delete MorphFrameTable::default_instance_;
  delete MorphFrameTable_reflection_;
  delete CameraFrameTable::default_instance_;
  delete CameraFrameTable_reflection_;
  delete LightFrameTable::default_instance_;
  delete LightFrameTable_reflection_;
  delete SelfShadowFrameTable::default_instance_;
  delete SelfShadowFrameTable_reflection_;
  delete VocaloidMotionData::default_instance_;
  delete VocaloidMotionData_reflection_;
}

void protobuf_AddDesc_vme_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tvme.proto\022\010vmdProto\"\034\n\004vec2\022\t\n\001x\030\001 \002(\002"
    "\022\t\n\001y\030\002 \002(\002\"\'\n\004vec3\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002("
    "\002\022\t\n\001z\030\003 \002(\002\"2\n\004vec4\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002"
    "(\002\022\t\n\001z\030\003 \002(\002\022\t\n\001w\030\004 \002(\002\"0\n\006Header\022\023\n\013ve"
    "rsionInfo\030\001 \002(\t\022\021\n\tmodelInfo\030\002 \003(\t\"!\n\005ID"
    "Tag\022\n\n\002id\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\"\363\001\n\021BezInt"
    "erpolParams\022\032\n\002X1\030\001 \002(\0132\016.vmdProto.vec2\022"
    "\032\n\002X2\030\002 \002(\0132\016.vmdProto.vec2\022\032\n\002Y1\030\003 \002(\0132"
    "\016.vmdProto.vec2\022\032\n\002Y2\030\004 \002(\0132\016.vmdProto.v"
    "ec2\022\032\n\002Z1\030\005 \002(\0132\016.vmdProto.vec2\022\032\n\002Z2\030\006 "
    "\002(\0132\016.vmdProto.vec2\022\032\n\002R1\030\007 \002(\0132\016.vmdPro"
    "to.vec2\022\032\n\002R2\030\010 \002(\0132\016.vmdProto.vec2\"\235\001\n\t"
    "BoneFrame\022\023\n\013frameNumber\030\001 \002(\004\022 \n\010positi"
    "on\030\002 \002(\0132\016.vmdProto.vec3\022 \n\010rotation\030\003 \002"
    "(\0132\016.vmdProto.vec4\0227\n\022interpolParameters"
    "\030\004 \001(\0132\033.vmdProto.BezInterpolParams\"0\n\nM"
    "orphFrame\022\023\n\013frameNumber\030\001 \002(\004\022\r\n\005value\030"
    "\002 \002(\002\"\307\001\n\013CameraFrame\022\023\n\013frameNumber\030\001 \002"
    "(\004\022 \n\010position\030\002 \002(\0132\016.vmdProto.vec3\022 \n\010"
    "rotation\030\003 \002(\0132\016.vmdProto.vec3\0227\n\022interp"
    "olParameters\030\004 \001(\0132\033.vmdProto.BezInterpo"
    "lParams\022\021\n\tviewAngle\030\005 \002(\004\022\023\n\013perspectiv"
    "e\030\006 \002(\r\"t\n\nLightFrame\022\023\n\013frameNumber\030\001 \002"
    "(\004\022\020\n\010distance\030\002 \002(\002\022\035\n\005color\030\003 \002(\0132\016.vm"
    "dProto.vec3\022 \n\010position\030\004 \002(\0132\016.vmdProto"
    ".vec3\"F\n\017SelfShadowFrame\022\023\n\013frameNumber\030"
    "\001 \002(\004\022\014\n\004type\030\002 \002(\r\022\020\n\010distance\030\003 \002(\002\"\"\n"
    "\006IKInfo\022\n\n\002id\030\001 \002(\004\022\014\n\004isOn\030\002 \002(\r\"L\n\013Sho"
    "wIKFrame\022\r\n\005frame\030\001 \002(\004\022\014\n\004show\030\002 \002(\r\022 \n"
    "\006ikInfo\030\003 \003(\0132\020.vmdProto.IKInfo\"A\n\016BoneF"
    "rameTable\022\n\n\002id\030\001 \002(\004\022#\n\006frames\030\002 \003(\0132\023."
    "vmdProto.BoneFrame\"C\n\017MorphFrameTable\022\n\n"
    "\002id\030\001 \002(\004\022$\n\006frames\030\002 \003(\0132\024.vmdProto.Mor"
    "phFrame\"E\n\020CameraFrameTable\022\n\n\002id\030\001 \001(\004\022"
    "%\n\006frames\030\002 \003(\0132\025.vmdProto.CameraFrame\"C"
    "\n\017LightFrameTable\022\n\n\002id\030\001 \001(\004\022$\n\006frames\030"
    "\002 \003(\0132\024.vmdProto.LightFrame\"M\n\024SelfShado"
    "wFrameTable\022\n\n\002id\030\001 \001(\004\022)\n\006frames\030\002 \003(\0132"
    "\031.vmdProto.SelfShadowFrame\"\276\004\n\022VocaloidM"
    "otionData\022 \n\006header\030\001 \002(\0132\020.vmdProto.Hea"
    "der\022$\n\013boneIDTable\030\002 \003(\0132\017.vmdProto.IDTa"
    "g\022%\n\014morphIDTable\030\003 \003(\0132\017.vmdProto.IDTag"
    "\022&\n\rcameraIDTable\030\004 \003(\0132\017.vmdProto.IDTag"
    "\022%\n\014lightIDTable\030\005 \003(\0132\017.vmdProto.IDTag\022"
    "*\n\021selfShadowIDTable\030\006 \003(\0132\017.vmdProto.ID"
    "Tag\0221\n\017boneFrameTables\030\007 \003(\0132\030.vmdProto."
    "BoneFrameTable\0223\n\020morphFrameTables\030\010 \003(\013"
    "2\031.vmdProto.MorphFrameTable\0225\n\021cameraFra"
    "meTables\030\t \003(\0132\032.vmdProto.CameraFrameTab"
    "le\0223\n\020lightFrameTables\030\n \003(\0132\031.vmdProto."
    "LightFrameTable\022=\n\025selfShadowFrameTables"
    "\030\013 \003(\0132\036.vmdProto.SelfShadowFrameTable\022+"
    "\n\014showIKFrames\030\014 \003(\0132\025.vmdProto.ShowIKFr"
    "ame", 2123);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vme.proto", &protobuf_RegisterTypes);
  vec2::default_instance_ = new vec2();
  vec3::default_instance_ = new vec3();
  vec4::default_instance_ = new vec4();
  Header::default_instance_ = new Header();
  IDTag::default_instance_ = new IDTag();
  BezInterpolParams::default_instance_ = new BezInterpolParams();
  BoneFrame::default_instance_ = new BoneFrame();
  MorphFrame::default_instance_ = new MorphFrame();
  CameraFrame::default_instance_ = new CameraFrame();
  LightFrame::default_instance_ = new LightFrame();
  SelfShadowFrame::default_instance_ = new SelfShadowFrame();
  IKInfo::default_instance_ = new IKInfo();
  ShowIKFrame::default_instance_ = new ShowIKFrame();
  BoneFrameTable::default_instance_ = new BoneFrameTable();
  MorphFrameTable::default_instance_ = new MorphFrameTable();
  CameraFrameTable::default_instance_ = new CameraFrameTable();
  LightFrameTable::default_instance_ = new LightFrameTable();
  SelfShadowFrameTable::default_instance_ = new SelfShadowFrameTable();
  VocaloidMotionData::default_instance_ = new VocaloidMotionData();
  vec2::default_instance_->InitAsDefaultInstance();
  vec3::default_instance_->InitAsDefaultInstance();
  vec4::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  IDTag::default_instance_->InitAsDefaultInstance();
  BezInterpolParams::default_instance_->InitAsDefaultInstance();
  BoneFrame::default_instance_->InitAsDefaultInstance();
  MorphFrame::default_instance_->InitAsDefaultInstance();
  CameraFrame::default_instance_->InitAsDefaultInstance();
  LightFrame::default_instance_->InitAsDefaultInstance();
  SelfShadowFrame::default_instance_->InitAsDefaultInstance();
  IKInfo::default_instance_->InitAsDefaultInstance();
  ShowIKFrame::default_instance_->InitAsDefaultInstance();
  BoneFrameTable::default_instance_->InitAsDefaultInstance();
  MorphFrameTable::default_instance_->InitAsDefaultInstance();
  CameraFrameTable::default_instance_->InitAsDefaultInstance();
  LightFrameTable::default_instance_->InitAsDefaultInstance();
  SelfShadowFrameTable::default_instance_->InitAsDefaultInstance();
  VocaloidMotionData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vme_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vme_2eproto {
  StaticDescriptorInitializer_vme_2eproto() {
    protobuf_AddDesc_vme_2eproto();
  }
} static_descriptor_initializer_vme_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int vec2::kXFieldNumber;
const int vec2::kYFieldNumber;
#endif  // !_MSC_VER

vec2::vec2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vec2::InitAsDefaultInstance() {
}

vec2::vec2(const vec2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vec2::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vec2::~vec2() {
  SharedDtor();
}

void vec2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vec2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vec2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vec2_descriptor_;
}

const vec2& vec2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

vec2* vec2::default_instance_ = NULL;

vec2* vec2::New() const {
  return new vec2;
}

void vec2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vec2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vec2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vec2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vec2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vec2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vec2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vec2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vec2::MergeFrom(const vec2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vec2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec2::CopyFrom(const vec2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void vec2::Swap(vec2* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vec2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vec2_descriptor_;
  metadata.reflection = vec2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vec3::kXFieldNumber;
const int vec3::kYFieldNumber;
const int vec3::kZFieldNumber;
#endif  // !_MSC_VER

vec3::vec3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vec3::InitAsDefaultInstance() {
}

vec3::vec3(const vec3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vec3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vec3::~vec3() {
  SharedDtor();
}

void vec3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vec3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vec3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vec3_descriptor_;
}

const vec3& vec3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

vec3* vec3::default_instance_ = NULL;

vec3* vec3::New() const {
  return new vec3;
}

void vec3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vec3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vec3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vec3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vec3::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vec3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vec3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vec3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vec3::MergeFrom(const vec3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vec3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec3::CopyFrom(const vec3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void vec3::Swap(vec3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vec3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vec3_descriptor_;
  metadata.reflection = vec3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vec4::kXFieldNumber;
const int vec4::kYFieldNumber;
const int vec4::kZFieldNumber;
const int vec4::kWFieldNumber;
#endif  // !_MSC_VER

vec4::vec4()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vec4::InitAsDefaultInstance() {
}

vec4::vec4(const vec4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vec4::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vec4::~vec4() {
  SharedDtor();
}

void vec4::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vec4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vec4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vec4_descriptor_;
}

const vec4& vec4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

vec4* vec4::default_instance_ = NULL;

vec4* vec4::New() const {
  return new vec4;
}

void vec4::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    w_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vec4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_w;
        break;
      }
      
      // required float w = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vec4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  // required float w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vec4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  // required float w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vec4::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
    // required float w = 4;
    if (has_w()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vec4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vec4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vec4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vec4::MergeFrom(const vec4& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vec4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vec4::CopyFrom(const vec4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vec4::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void vec4::Swap(vec4* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(w_, other->w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vec4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vec4_descriptor_;
  metadata.reflection = vec4_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Header::kVersionInfoFieldNumber;
const int Header::kModelInfoFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header::InitAsDefaultInstance() {
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  versioninfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  SharedDtor();
}

void Header::SharedDtor() {
  if (versioninfo_ != &::google::protobuf::internal::kEmptyString) {
    delete versioninfo_;
  }
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_versioninfo()) {
      if (versioninfo_ != &::google::protobuf::internal::kEmptyString) {
        versioninfo_->clear();
      }
    }
  }
  modelinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string versionInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_versioninfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->versioninfo().data(), this->versioninfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_modelInfo;
        break;
      }
      
      // repeated string modelInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modelInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_modelinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modelinfo(0).data(), this->modelinfo(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_modelInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string versionInfo = 1;
  if (has_versioninfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->versioninfo().data(), this->versioninfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->versioninfo(), output);
  }
  
  // repeated string modelInfo = 2;
  for (int i = 0; i < this->modelinfo_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->modelinfo(i).data(), this->modelinfo(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->modelinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string versionInfo = 1;
  if (has_versioninfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->versioninfo().data(), this->versioninfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->versioninfo(), target);
  }
  
  // repeated string modelInfo = 2;
  for (int i = 0; i < this->modelinfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelinfo(i).data(), this->modelinfo(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->modelinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string versionInfo = 1;
    if (has_versioninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->versioninfo());
    }
    
  }
  // repeated string modelInfo = 2;
  total_size += 1 * this->modelinfo_size();
  for (int i = 0; i < this->modelinfo_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->modelinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  modelinfo_.MergeFrom(from.modelinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_versioninfo()) {
      set_versioninfo(from.versioninfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(versioninfo_, other->versioninfo_);
    modelinfo_.Swap(&other->modelinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IDTag::kIdFieldNumber;
const int IDTag::kNameFieldNumber;
#endif  // !_MSC_VER

IDTag::IDTag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IDTag::InitAsDefaultInstance() {
}

IDTag::IDTag(const IDTag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IDTag::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IDTag::~IDTag() {
  SharedDtor();
}

void IDTag::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void IDTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IDTag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IDTag_descriptor_;
}

const IDTag& IDTag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

IDTag* IDTag::default_instance_ = NULL;

IDTag* IDTag::New() const {
  return new IDTag;
}

void IDTag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IDTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IDTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IDTag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IDTag::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IDTag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IDTag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IDTag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IDTag::MergeFrom(const IDTag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IDTag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDTag::CopyFrom(const IDTag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDTag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void IDTag::Swap(IDTag* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IDTag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IDTag_descriptor_;
  metadata.reflection = IDTag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BezInterpolParams::kX1FieldNumber;
const int BezInterpolParams::kX2FieldNumber;
const int BezInterpolParams::kY1FieldNumber;
const int BezInterpolParams::kY2FieldNumber;
const int BezInterpolParams::kZ1FieldNumber;
const int BezInterpolParams::kZ2FieldNumber;
const int BezInterpolParams::kR1FieldNumber;
const int BezInterpolParams::kR2FieldNumber;
#endif  // !_MSC_VER

BezInterpolParams::BezInterpolParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BezInterpolParams::InitAsDefaultInstance() {
  x1_ = const_cast< ::vmdProto::vec2*>(&::vmdProto::vec2::default_instance());
  x2_ = const_cast< ::vmdProto::vec2*>(&::vmdProto::vec2::default_instance());
  y1_ = const_cast< ::vmdProto::vec2*>(&::vmdProto::vec2::default_instance());
  y2_ = const_cast< ::vmdProto::vec2*>(&::vmdProto::vec2::default_instance());
  z1_ = const_cast< ::vmdProto::vec2*>(&::vmdProto::vec2::default_instance());
  z2_ = const_cast< ::vmdProto::vec2*>(&::vmdProto::vec2::default_instance());
  r1_ = const_cast< ::vmdProto::vec2*>(&::vmdProto::vec2::default_instance());
  r2_ = const_cast< ::vmdProto::vec2*>(&::vmdProto::vec2::default_instance());
}

BezInterpolParams::BezInterpolParams(const BezInterpolParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BezInterpolParams::SharedCtor() {
  _cached_size_ = 0;
  x1_ = NULL;
  x2_ = NULL;
  y1_ = NULL;
  y2_ = NULL;
  z1_ = NULL;
  z2_ = NULL;
  r1_ = NULL;
  r2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BezInterpolParams::~BezInterpolParams() {
  SharedDtor();
}

void BezInterpolParams::SharedDtor() {
  if (this != default_instance_) {
    delete x1_;
    delete x2_;
    delete y1_;
    delete y2_;
    delete z1_;
    delete z2_;
    delete r1_;
    delete r2_;
  }
}

void BezInterpolParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BezInterpolParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BezInterpolParams_descriptor_;
}

const BezInterpolParams& BezInterpolParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

BezInterpolParams* BezInterpolParams::default_instance_ = NULL;

BezInterpolParams* BezInterpolParams::New() const {
  return new BezInterpolParams;
}

void BezInterpolParams::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_x1()) {
      if (x1_ != NULL) x1_->::vmdProto::vec2::Clear();
    }
    if (has_x2()) {
      if (x2_ != NULL) x2_->::vmdProto::vec2::Clear();
    }
    if (has_y1()) {
      if (y1_ != NULL) y1_->::vmdProto::vec2::Clear();
    }
    if (has_y2()) {
      if (y2_ != NULL) y2_->::vmdProto::vec2::Clear();
    }
    if (has_z1()) {
      if (z1_ != NULL) z1_->::vmdProto::vec2::Clear();
    }
    if (has_z2()) {
      if (z2_ != NULL) z2_->::vmdProto::vec2::Clear();
    }
    if (has_r1()) {
      if (r1_ != NULL) r1_->::vmdProto::vec2::Clear();
    }
    if (has_r2()) {
      if (r2_ != NULL) r2_->::vmdProto::vec2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BezInterpolParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmdProto.vec2 X1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_X2;
        break;
      }
      
      // required .vmdProto.vec2 X2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_X2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Y1;
        break;
      }
      
      // required .vmdProto.vec2 Y1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Y1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_y1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Y2;
        break;
      }
      
      // required .vmdProto.vec2 Y2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Y2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_y2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Z1;
        break;
      }
      
      // required .vmdProto.vec2 Z1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Z1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_z1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Z2;
        break;
      }
      
      // required .vmdProto.vec2 Z2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Z2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_z2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_R1;
        break;
      }
      
      // required .vmdProto.vec2 R1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_R1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_r1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_R2;
        break;
      }
      
      // required .vmdProto.vec2 R2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_R2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_r2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BezInterpolParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmdProto.vec2 X1 = 1;
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->x1(), output);
  }
  
  // required .vmdProto.vec2 X2 = 2;
  if (has_x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->x2(), output);
  }
  
  // required .vmdProto.vec2 Y1 = 3;
  if (has_y1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->y1(), output);
  }
  
  // required .vmdProto.vec2 Y2 = 4;
  if (has_y2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->y2(), output);
  }
  
  // required .vmdProto.vec2 Z1 = 5;
  if (has_z1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->z1(), output);
  }
  
  // required .vmdProto.vec2 Z2 = 6;
  if (has_z2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->z2(), output);
  }
  
  // required .vmdProto.vec2 R1 = 7;
  if (has_r1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->r1(), output);
  }
  
  // required .vmdProto.vec2 R2 = 8;
  if (has_r2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->r2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BezInterpolParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vmdProto.vec2 X1 = 1;
  if (has_x1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->x1(), target);
  }
  
  // required .vmdProto.vec2 X2 = 2;
  if (has_x2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->x2(), target);
  }
  
  // required .vmdProto.vec2 Y1 = 3;
  if (has_y1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->y1(), target);
  }
  
  // required .vmdProto.vec2 Y2 = 4;
  if (has_y2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->y2(), target);
  }
  
  // required .vmdProto.vec2 Z1 = 5;
  if (has_z1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->z1(), target);
  }
  
  // required .vmdProto.vec2 Z2 = 6;
  if (has_z2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->z2(), target);
  }
  
  // required .vmdProto.vec2 R1 = 7;
  if (has_r1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->r1(), target);
  }
  
  // required .vmdProto.vec2 R2 = 8;
  if (has_r2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->r2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BezInterpolParams::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmdProto.vec2 X1 = 1;
    if (has_x1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x1());
    }
    
    // required .vmdProto.vec2 X2 = 2;
    if (has_x2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->x2());
    }
    
    // required .vmdProto.vec2 Y1 = 3;
    if (has_y1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->y1());
    }
    
    // required .vmdProto.vec2 Y2 = 4;
    if (has_y2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->y2());
    }
    
    // required .vmdProto.vec2 Z1 = 5;
    if (has_z1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->z1());
    }
    
    // required .vmdProto.vec2 Z2 = 6;
    if (has_z2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->z2());
    }
    
    // required .vmdProto.vec2 R1 = 7;
    if (has_r1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->r1());
    }
    
    // required .vmdProto.vec2 R2 = 8;
    if (has_r2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->r2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BezInterpolParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BezInterpolParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BezInterpolParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BezInterpolParams::MergeFrom(const BezInterpolParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x1()) {
      mutable_x1()->::vmdProto::vec2::MergeFrom(from.x1());
    }
    if (from.has_x2()) {
      mutable_x2()->::vmdProto::vec2::MergeFrom(from.x2());
    }
    if (from.has_y1()) {
      mutable_y1()->::vmdProto::vec2::MergeFrom(from.y1());
    }
    if (from.has_y2()) {
      mutable_y2()->::vmdProto::vec2::MergeFrom(from.y2());
    }
    if (from.has_z1()) {
      mutable_z1()->::vmdProto::vec2::MergeFrom(from.z1());
    }
    if (from.has_z2()) {
      mutable_z2()->::vmdProto::vec2::MergeFrom(from.z2());
    }
    if (from.has_r1()) {
      mutable_r1()->::vmdProto::vec2::MergeFrom(from.r1());
    }
    if (from.has_r2()) {
      mutable_r2()->::vmdProto::vec2::MergeFrom(from.r2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BezInterpolParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BezInterpolParams::CopyFrom(const BezInterpolParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BezInterpolParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_x1()) {
    if (!this->x1().IsInitialized()) return false;
  }
  if (has_x2()) {
    if (!this->x2().IsInitialized()) return false;
  }
  if (has_y1()) {
    if (!this->y1().IsInitialized()) return false;
  }
  if (has_y2()) {
    if (!this->y2().IsInitialized()) return false;
  }
  if (has_z1()) {
    if (!this->z1().IsInitialized()) return false;
  }
  if (has_z2()) {
    if (!this->z2().IsInitialized()) return false;
  }
  if (has_r1()) {
    if (!this->r1().IsInitialized()) return false;
  }
  if (has_r2()) {
    if (!this->r2().IsInitialized()) return false;
  }
  return true;
}

void BezInterpolParams::Swap(BezInterpolParams* other) {
  if (other != this) {
    std::swap(x1_, other->x1_);
    std::swap(x2_, other->x2_);
    std::swap(y1_, other->y1_);
    std::swap(y2_, other->y2_);
    std::swap(z1_, other->z1_);
    std::swap(z2_, other->z2_);
    std::swap(r1_, other->r1_);
    std::swap(r2_, other->r2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BezInterpolParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BezInterpolParams_descriptor_;
  metadata.reflection = BezInterpolParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoneFrame::kFrameNumberFieldNumber;
const int BoneFrame::kPositionFieldNumber;
const int BoneFrame::kRotationFieldNumber;
const int BoneFrame::kInterpolParametersFieldNumber;
#endif  // !_MSC_VER

BoneFrame::BoneFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoneFrame::InitAsDefaultInstance() {
  position_ = const_cast< ::vmdProto::vec3*>(&::vmdProto::vec3::default_instance());
  rotation_ = const_cast< ::vmdProto::vec4*>(&::vmdProto::vec4::default_instance());
  interpolparameters_ = const_cast< ::vmdProto::BezInterpolParams*>(&::vmdProto::BezInterpolParams::default_instance());
}

BoneFrame::BoneFrame(const BoneFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoneFrame::SharedCtor() {
  _cached_size_ = 0;
  framenumber_ = GOOGLE_ULONGLONG(0);
  position_ = NULL;
  rotation_ = NULL;
  interpolparameters_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoneFrame::~BoneFrame() {
  SharedDtor();
}

void BoneFrame::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete rotation_;
    delete interpolparameters_;
  }
}

void BoneFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoneFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoneFrame_descriptor_;
}

const BoneFrame& BoneFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

BoneFrame* BoneFrame::default_instance_ = NULL;

BoneFrame* BoneFrame::New() const {
  return new BoneFrame;
}

void BoneFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framenumber_ = GOOGLE_ULONGLONG(0);
    if (has_position()) {
      if (position_ != NULL) position_->::vmdProto::vec3::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::vmdProto::vec4::Clear();
    }
    if (has_interpolparameters()) {
      if (interpolparameters_ != NULL) interpolparameters_->::vmdProto::BezInterpolParams::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoneFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 frameNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &framenumber_)));
          set_has_framenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }
      
      // required .vmdProto.vec3 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rotation;
        break;
      }
      
      // required .vmdProto.vec4 rotation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_interpolParameters;
        break;
      }
      
      // optional .vmdProto.BezInterpolParams interpolParameters = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interpolParameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interpolparameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoneFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 frameNumber = 1;
  if (has_framenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->framenumber(), output);
  }
  
  // required .vmdProto.vec3 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }
  
  // required .vmdProto.vec4 rotation = 3;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rotation(), output);
  }
  
  // optional .vmdProto.BezInterpolParams interpolParameters = 4;
  if (has_interpolparameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->interpolparameters(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoneFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 frameNumber = 1;
  if (has_framenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->framenumber(), target);
  }
  
  // required .vmdProto.vec3 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }
  
  // required .vmdProto.vec4 rotation = 3;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rotation(), target);
  }
  
  // optional .vmdProto.BezInterpolParams interpolParameters = 4;
  if (has_interpolparameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->interpolparameters(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoneFrame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 frameNumber = 1;
    if (has_framenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->framenumber());
    }
    
    // required .vmdProto.vec3 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // required .vmdProto.vec4 rotation = 3;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }
    
    // optional .vmdProto.BezInterpolParams interpolParameters = 4;
    if (has_interpolparameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->interpolparameters());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoneFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoneFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoneFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoneFrame::MergeFrom(const BoneFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framenumber()) {
      set_framenumber(from.framenumber());
    }
    if (from.has_position()) {
      mutable_position()->::vmdProto::vec3::MergeFrom(from.position());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::vmdProto::vec4::MergeFrom(from.rotation());
    }
    if (from.has_interpolparameters()) {
      mutable_interpolparameters()->::vmdProto::BezInterpolParams::MergeFrom(from.interpolparameters());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoneFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoneFrame::CopyFrom(const BoneFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoneFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_rotation()) {
    if (!this->rotation().IsInitialized()) return false;
  }
  if (has_interpolparameters()) {
    if (!this->interpolparameters().IsInitialized()) return false;
  }
  return true;
}

void BoneFrame::Swap(BoneFrame* other) {
  if (other != this) {
    std::swap(framenumber_, other->framenumber_);
    std::swap(position_, other->position_);
    std::swap(rotation_, other->rotation_);
    std::swap(interpolparameters_, other->interpolparameters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoneFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoneFrame_descriptor_;
  metadata.reflection = BoneFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MorphFrame::kFrameNumberFieldNumber;
const int MorphFrame::kValueFieldNumber;
#endif  // !_MSC_VER

MorphFrame::MorphFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MorphFrame::InitAsDefaultInstance() {
}

MorphFrame::MorphFrame(const MorphFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MorphFrame::SharedCtor() {
  _cached_size_ = 0;
  framenumber_ = GOOGLE_ULONGLONG(0);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MorphFrame::~MorphFrame() {
  SharedDtor();
}

void MorphFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MorphFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MorphFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MorphFrame_descriptor_;
}

const MorphFrame& MorphFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

MorphFrame* MorphFrame::default_instance_ = NULL;

MorphFrame* MorphFrame::New() const {
  return new MorphFrame;
}

void MorphFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framenumber_ = GOOGLE_ULONGLONG(0);
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MorphFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 frameNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &framenumber_)));
          set_has_framenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }
      
      // required float value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MorphFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 frameNumber = 1;
  if (has_framenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->framenumber(), output);
  }
  
  // required float value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MorphFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 frameNumber = 1;
  if (has_framenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->framenumber(), target);
  }
  
  // required float value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MorphFrame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 frameNumber = 1;
    if (has_framenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->framenumber());
    }
    
    // required float value = 2;
    if (has_value()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MorphFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MorphFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MorphFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MorphFrame::MergeFrom(const MorphFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framenumber()) {
      set_framenumber(from.framenumber());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MorphFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MorphFrame::CopyFrom(const MorphFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MorphFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MorphFrame::Swap(MorphFrame* other) {
  if (other != this) {
    std::swap(framenumber_, other->framenumber_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MorphFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MorphFrame_descriptor_;
  metadata.reflection = MorphFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraFrame::kFrameNumberFieldNumber;
const int CameraFrame::kPositionFieldNumber;
const int CameraFrame::kRotationFieldNumber;
const int CameraFrame::kInterpolParametersFieldNumber;
const int CameraFrame::kViewAngleFieldNumber;
const int CameraFrame::kPerspectiveFieldNumber;
#endif  // !_MSC_VER

CameraFrame::CameraFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraFrame::InitAsDefaultInstance() {
  position_ = const_cast< ::vmdProto::vec3*>(&::vmdProto::vec3::default_instance());
  rotation_ = const_cast< ::vmdProto::vec3*>(&::vmdProto::vec3::default_instance());
  interpolparameters_ = const_cast< ::vmdProto::BezInterpolParams*>(&::vmdProto::BezInterpolParams::default_instance());
}

CameraFrame::CameraFrame(const CameraFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraFrame::SharedCtor() {
  _cached_size_ = 0;
  framenumber_ = GOOGLE_ULONGLONG(0);
  position_ = NULL;
  rotation_ = NULL;
  interpolparameters_ = NULL;
  viewangle_ = GOOGLE_ULONGLONG(0);
  perspective_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraFrame::~CameraFrame() {
  SharedDtor();
}

void CameraFrame::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete rotation_;
    delete interpolparameters_;
  }
}

void CameraFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraFrame_descriptor_;
}

const CameraFrame& CameraFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

CameraFrame* CameraFrame::default_instance_ = NULL;

CameraFrame* CameraFrame::New() const {
  return new CameraFrame;
}

void CameraFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framenumber_ = GOOGLE_ULONGLONG(0);
    if (has_position()) {
      if (position_ != NULL) position_->::vmdProto::vec3::Clear();
    }
    if (has_rotation()) {
      if (rotation_ != NULL) rotation_->::vmdProto::vec3::Clear();
    }
    if (has_interpolparameters()) {
      if (interpolparameters_ != NULL) interpolparameters_->::vmdProto::BezInterpolParams::Clear();
    }
    viewangle_ = GOOGLE_ULONGLONG(0);
    perspective_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 frameNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &framenumber_)));
          set_has_framenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }
      
      // required .vmdProto.vec3 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rotation;
        break;
      }
      
      // required .vmdProto.vec3 rotation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_interpolParameters;
        break;
      }
      
      // optional .vmdProto.BezInterpolParams interpolParameters = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interpolParameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_interpolparameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_viewAngle;
        break;
      }
      
      // required uint64 viewAngle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viewAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &viewangle_)));
          set_has_viewangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_perspective;
        break;
      }
      
      // required uint32 perspective = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_perspective:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perspective_)));
          set_has_perspective();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 frameNumber = 1;
  if (has_framenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->framenumber(), output);
  }
  
  // required .vmdProto.vec3 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }
  
  // required .vmdProto.vec3 rotation = 3;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rotation(), output);
  }
  
  // optional .vmdProto.BezInterpolParams interpolParameters = 4;
  if (has_interpolparameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->interpolparameters(), output);
  }
  
  // required uint64 viewAngle = 5;
  if (has_viewangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->viewangle(), output);
  }
  
  // required uint32 perspective = 6;
  if (has_perspective()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->perspective(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 frameNumber = 1;
  if (has_framenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->framenumber(), target);
  }
  
  // required .vmdProto.vec3 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }
  
  // required .vmdProto.vec3 rotation = 3;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rotation(), target);
  }
  
  // optional .vmdProto.BezInterpolParams interpolParameters = 4;
  if (has_interpolparameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->interpolparameters(), target);
  }
  
  // required uint64 viewAngle = 5;
  if (has_viewangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->viewangle(), target);
  }
  
  // required uint32 perspective = 6;
  if (has_perspective()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->perspective(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraFrame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 frameNumber = 1;
    if (has_framenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->framenumber());
    }
    
    // required .vmdProto.vec3 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // required .vmdProto.vec3 rotation = 3;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotation());
    }
    
    // optional .vmdProto.BezInterpolParams interpolParameters = 4;
    if (has_interpolparameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->interpolparameters());
    }
    
    // required uint64 viewAngle = 5;
    if (has_viewangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->viewangle());
    }
    
    // required uint32 perspective = 6;
    if (has_perspective()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perspective());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraFrame::MergeFrom(const CameraFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framenumber()) {
      set_framenumber(from.framenumber());
    }
    if (from.has_position()) {
      mutable_position()->::vmdProto::vec3::MergeFrom(from.position());
    }
    if (from.has_rotation()) {
      mutable_rotation()->::vmdProto::vec3::MergeFrom(from.rotation());
    }
    if (from.has_interpolparameters()) {
      mutable_interpolparameters()->::vmdProto::BezInterpolParams::MergeFrom(from.interpolparameters());
    }
    if (from.has_viewangle()) {
      set_viewangle(from.viewangle());
    }
    if (from.has_perspective()) {
      set_perspective(from.perspective());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraFrame::CopyFrom(const CameraFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_rotation()) {
    if (!this->rotation().IsInitialized()) return false;
  }
  if (has_interpolparameters()) {
    if (!this->interpolparameters().IsInitialized()) return false;
  }
  return true;
}

void CameraFrame::Swap(CameraFrame* other) {
  if (other != this) {
    std::swap(framenumber_, other->framenumber_);
    std::swap(position_, other->position_);
    std::swap(rotation_, other->rotation_);
    std::swap(interpolparameters_, other->interpolparameters_);
    std::swap(viewangle_, other->viewangle_);
    std::swap(perspective_, other->perspective_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraFrame_descriptor_;
  metadata.reflection = CameraFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LightFrame::kFrameNumberFieldNumber;
const int LightFrame::kDistanceFieldNumber;
const int LightFrame::kColorFieldNumber;
const int LightFrame::kPositionFieldNumber;
#endif  // !_MSC_VER

LightFrame::LightFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LightFrame::InitAsDefaultInstance() {
  color_ = const_cast< ::vmdProto::vec3*>(&::vmdProto::vec3::default_instance());
  position_ = const_cast< ::vmdProto::vec3*>(&::vmdProto::vec3::default_instance());
}

LightFrame::LightFrame(const LightFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LightFrame::SharedCtor() {
  _cached_size_ = 0;
  framenumber_ = GOOGLE_ULONGLONG(0);
  distance_ = 0;
  color_ = NULL;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LightFrame::~LightFrame() {
  SharedDtor();
}

void LightFrame::SharedDtor() {
  if (this != default_instance_) {
    delete color_;
    delete position_;
  }
}

void LightFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LightFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightFrame_descriptor_;
}

const LightFrame& LightFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

LightFrame* LightFrame::default_instance_ = NULL;

LightFrame* LightFrame::New() const {
  return new LightFrame;
}

void LightFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framenumber_ = GOOGLE_ULONGLONG(0);
    distance_ = 0;
    if (has_color()) {
      if (color_ != NULL) color_->::vmdProto::vec3::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::vmdProto::vec3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LightFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 frameNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &framenumber_)));
          set_has_framenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_distance;
        break;
      }
      
      // required float distance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_color;
        break;
      }
      
      // required .vmdProto.vec3 color = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_position;
        break;
      }
      
      // required .vmdProto.vec3 position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LightFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 frameNumber = 1;
  if (has_framenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->framenumber(), output);
  }
  
  // required float distance = 2;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distance(), output);
  }
  
  // required .vmdProto.vec3 color = 3;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->color(), output);
  }
  
  // required .vmdProto.vec3 position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LightFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 frameNumber = 1;
  if (has_framenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->framenumber(), target);
  }
  
  // required float distance = 2;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->distance(), target);
  }
  
  // required .vmdProto.vec3 color = 3;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->color(), target);
  }
  
  // required .vmdProto.vec3 position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LightFrame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 frameNumber = 1;
    if (has_framenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->framenumber());
    }
    
    // required float distance = 2;
    if (has_distance()) {
      total_size += 1 + 4;
    }
    
    // required .vmdProto.vec3 color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }
    
    // required .vmdProto.vec3 position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LightFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LightFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LightFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LightFrame::MergeFrom(const LightFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framenumber()) {
      set_framenumber(from.framenumber());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_color()) {
      mutable_color()->::vmdProto::vec3::MergeFrom(from.color());
    }
    if (from.has_position()) {
      mutable_position()->::vmdProto::vec3::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LightFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightFrame::CopyFrom(const LightFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void LightFrame::Swap(LightFrame* other) {
  if (other != this) {
    std::swap(framenumber_, other->framenumber_);
    std::swap(distance_, other->distance_);
    std::swap(color_, other->color_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LightFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LightFrame_descriptor_;
  metadata.reflection = LightFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelfShadowFrame::kFrameNumberFieldNumber;
const int SelfShadowFrame::kTypeFieldNumber;
const int SelfShadowFrame::kDistanceFieldNumber;
#endif  // !_MSC_VER

SelfShadowFrame::SelfShadowFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelfShadowFrame::InitAsDefaultInstance() {
}

SelfShadowFrame::SelfShadowFrame(const SelfShadowFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelfShadowFrame::SharedCtor() {
  _cached_size_ = 0;
  framenumber_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelfShadowFrame::~SelfShadowFrame() {
  SharedDtor();
}

void SelfShadowFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelfShadowFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelfShadowFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelfShadowFrame_descriptor_;
}

const SelfShadowFrame& SelfShadowFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

SelfShadowFrame* SelfShadowFrame::default_instance_ = NULL;

SelfShadowFrame* SelfShadowFrame::New() const {
  return new SelfShadowFrame;
}

void SelfShadowFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framenumber_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    distance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelfShadowFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 frameNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &framenumber_)));
          set_has_framenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_distance;
        break;
      }
      
      // required float distance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelfShadowFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 frameNumber = 1;
  if (has_framenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->framenumber(), output);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // required float distance = 3;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->distance(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelfShadowFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 frameNumber = 1;
  if (has_framenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->framenumber(), target);
  }
  
  // required uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // required float distance = 3;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->distance(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelfShadowFrame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 frameNumber = 1;
    if (has_framenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->framenumber());
    }
    
    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required float distance = 3;
    if (has_distance()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelfShadowFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelfShadowFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelfShadowFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelfShadowFrame::MergeFrom(const SelfShadowFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framenumber()) {
      set_framenumber(from.framenumber());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelfShadowFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelfShadowFrame::CopyFrom(const SelfShadowFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfShadowFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SelfShadowFrame::Swap(SelfShadowFrame* other) {
  if (other != this) {
    std::swap(framenumber_, other->framenumber_);
    std::swap(type_, other->type_);
    std::swap(distance_, other->distance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelfShadowFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelfShadowFrame_descriptor_;
  metadata.reflection = SelfShadowFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IKInfo::kIdFieldNumber;
const int IKInfo::kIsOnFieldNumber;
#endif  // !_MSC_VER

IKInfo::IKInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IKInfo::InitAsDefaultInstance() {
}

IKInfo::IKInfo(const IKInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IKInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ison_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IKInfo::~IKInfo() {
  SharedDtor();
}

void IKInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IKInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IKInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IKInfo_descriptor_;
}

const IKInfo& IKInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

IKInfo* IKInfo::default_instance_ = NULL;

IKInfo* IKInfo::New() const {
  return new IKInfo;
}

void IKInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    ison_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IKInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isOn;
        break;
      }
      
      // required uint32 isOn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ison_)));
          set_has_ison();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IKInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // required uint32 isOn = 2;
  if (has_ison()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ison(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IKInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // required uint32 isOn = 2;
  if (has_ison()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ison(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IKInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
    // required uint32 isOn = 2;
    if (has_ison()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ison());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IKInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IKInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IKInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IKInfo::MergeFrom(const IKInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ison()) {
      set_ison(from.ison());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IKInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IKInfo::CopyFrom(const IKInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IKInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void IKInfo::Swap(IKInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ison_, other->ison_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IKInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IKInfo_descriptor_;
  metadata.reflection = IKInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShowIKFrame::kFrameFieldNumber;
const int ShowIKFrame::kShowFieldNumber;
const int ShowIKFrame::kIkInfoFieldNumber;
#endif  // !_MSC_VER

ShowIKFrame::ShowIKFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShowIKFrame::InitAsDefaultInstance() {
}

ShowIKFrame::ShowIKFrame(const ShowIKFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShowIKFrame::SharedCtor() {
  _cached_size_ = 0;
  frame_ = GOOGLE_ULONGLONG(0);
  show_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowIKFrame::~ShowIKFrame() {
  SharedDtor();
}

void ShowIKFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShowIKFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowIKFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowIKFrame_descriptor_;
}

const ShowIKFrame& ShowIKFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

ShowIKFrame* ShowIKFrame::default_instance_ = NULL;

ShowIKFrame* ShowIKFrame::New() const {
  return new ShowIKFrame;
}

void ShowIKFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    frame_ = GOOGLE_ULONGLONG(0);
    show_ = 0u;
  }
  ikinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShowIKFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 frame = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show;
        break;
      }
      
      // required uint32 show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ikInfo;
        break;
      }
      
      // repeated .vmdProto.IKInfo ikInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ikInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ikinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ikInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShowIKFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 frame = 1;
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->frame(), output);
  }
  
  // required uint32 show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->show(), output);
  }
  
  // repeated .vmdProto.IKInfo ikInfo = 3;
  for (int i = 0; i < this->ikinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ikinfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShowIKFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 frame = 1;
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->frame(), target);
  }
  
  // required uint32 show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->show(), target);
  }
  
  // repeated .vmdProto.IKInfo ikInfo = 3;
  for (int i = 0; i < this->ikinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ikinfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShowIKFrame::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 frame = 1;
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frame());
    }
    
    // required uint32 show = 2;
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->show());
    }
    
  }
  // repeated .vmdProto.IKInfo ikInfo = 3;
  total_size += 1 * this->ikinfo_size();
  for (int i = 0; i < this->ikinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ikinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowIKFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShowIKFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShowIKFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShowIKFrame::MergeFrom(const ShowIKFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  ikinfo_.MergeFrom(from.ikinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame()) {
      set_frame(from.frame());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShowIKFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowIKFrame::CopyFrom(const ShowIKFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowIKFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < ikinfo_size(); i++) {
    if (!this->ikinfo(i).IsInitialized()) return false;
  }
  return true;
}

void ShowIKFrame::Swap(ShowIKFrame* other) {
  if (other != this) {
    std::swap(frame_, other->frame_);
    std::swap(show_, other->show_);
    ikinfo_.Swap(&other->ikinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShowIKFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowIKFrame_descriptor_;
  metadata.reflection = ShowIKFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoneFrameTable::kIdFieldNumber;
const int BoneFrameTable::kFramesFieldNumber;
#endif  // !_MSC_VER

BoneFrameTable::BoneFrameTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoneFrameTable::InitAsDefaultInstance() {
}

BoneFrameTable::BoneFrameTable(const BoneFrameTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoneFrameTable::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoneFrameTable::~BoneFrameTable() {
  SharedDtor();
}

void BoneFrameTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoneFrameTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoneFrameTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoneFrameTable_descriptor_;
}

const BoneFrameTable& BoneFrameTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

BoneFrameTable* BoneFrameTable::default_instance_ = NULL;

BoneFrameTable* BoneFrameTable::New() const {
  return new BoneFrameTable;
}

void BoneFrameTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoneFrameTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        break;
      }
      
      // repeated .vmdProto.BoneFrame frames = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoneFrameTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // repeated .vmdProto.BoneFrame frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frames(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoneFrameTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // repeated .vmdProto.BoneFrame frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frames(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoneFrameTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
  }
  // repeated .vmdProto.BoneFrame frames = 2;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoneFrameTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoneFrameTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoneFrameTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoneFrameTable::MergeFrom(const BoneFrameTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoneFrameTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoneFrameTable::CopyFrom(const BoneFrameTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoneFrameTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < frames_size(); i++) {
    if (!this->frames(i).IsInitialized()) return false;
  }
  return true;
}

void BoneFrameTable::Swap(BoneFrameTable* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoneFrameTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoneFrameTable_descriptor_;
  metadata.reflection = BoneFrameTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MorphFrameTable::kIdFieldNumber;
const int MorphFrameTable::kFramesFieldNumber;
#endif  // !_MSC_VER

MorphFrameTable::MorphFrameTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MorphFrameTable::InitAsDefaultInstance() {
}

MorphFrameTable::MorphFrameTable(const MorphFrameTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MorphFrameTable::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MorphFrameTable::~MorphFrameTable() {
  SharedDtor();
}

void MorphFrameTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MorphFrameTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MorphFrameTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MorphFrameTable_descriptor_;
}

const MorphFrameTable& MorphFrameTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

MorphFrameTable* MorphFrameTable::default_instance_ = NULL;

MorphFrameTable* MorphFrameTable::New() const {
  return new MorphFrameTable;
}

void MorphFrameTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MorphFrameTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        break;
      }
      
      // repeated .vmdProto.MorphFrame frames = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MorphFrameTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // repeated .vmdProto.MorphFrame frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frames(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MorphFrameTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // repeated .vmdProto.MorphFrame frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frames(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MorphFrameTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
  }
  // repeated .vmdProto.MorphFrame frames = 2;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MorphFrameTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MorphFrameTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MorphFrameTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MorphFrameTable::MergeFrom(const MorphFrameTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MorphFrameTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MorphFrameTable::CopyFrom(const MorphFrameTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MorphFrameTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < frames_size(); i++) {
    if (!this->frames(i).IsInitialized()) return false;
  }
  return true;
}

void MorphFrameTable::Swap(MorphFrameTable* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MorphFrameTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MorphFrameTable_descriptor_;
  metadata.reflection = MorphFrameTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraFrameTable::kIdFieldNumber;
const int CameraFrameTable::kFramesFieldNumber;
#endif  // !_MSC_VER

CameraFrameTable::CameraFrameTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CameraFrameTable::InitAsDefaultInstance() {
}

CameraFrameTable::CameraFrameTable(const CameraFrameTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CameraFrameTable::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraFrameTable::~CameraFrameTable() {
  SharedDtor();
}

void CameraFrameTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraFrameTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraFrameTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraFrameTable_descriptor_;
}

const CameraFrameTable& CameraFrameTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

CameraFrameTable* CameraFrameTable::default_instance_ = NULL;

CameraFrameTable* CameraFrameTable::New() const {
  return new CameraFrameTable;
}

void CameraFrameTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraFrameTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        break;
      }
      
      // repeated .vmdProto.CameraFrame frames = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CameraFrameTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // repeated .vmdProto.CameraFrame frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frames(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CameraFrameTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // repeated .vmdProto.CameraFrame frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frames(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CameraFrameTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
  }
  // repeated .vmdProto.CameraFrame frames = 2;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraFrameTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraFrameTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraFrameTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraFrameTable::MergeFrom(const CameraFrameTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraFrameTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraFrameTable::CopyFrom(const CameraFrameTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraFrameTable::IsInitialized() const {
  
  for (int i = 0; i < frames_size(); i++) {
    if (!this->frames(i).IsInitialized()) return false;
  }
  return true;
}

void CameraFrameTable::Swap(CameraFrameTable* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraFrameTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraFrameTable_descriptor_;
  metadata.reflection = CameraFrameTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LightFrameTable::kIdFieldNumber;
const int LightFrameTable::kFramesFieldNumber;
#endif  // !_MSC_VER

LightFrameTable::LightFrameTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LightFrameTable::InitAsDefaultInstance() {
}

LightFrameTable::LightFrameTable(const LightFrameTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LightFrameTable::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LightFrameTable::~LightFrameTable() {
  SharedDtor();
}

void LightFrameTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LightFrameTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LightFrameTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightFrameTable_descriptor_;
}

const LightFrameTable& LightFrameTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

LightFrameTable* LightFrameTable::default_instance_ = NULL;

LightFrameTable* LightFrameTable::New() const {
  return new LightFrameTable;
}

void LightFrameTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LightFrameTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        break;
      }
      
      // repeated .vmdProto.LightFrame frames = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LightFrameTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // repeated .vmdProto.LightFrame frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frames(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LightFrameTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // repeated .vmdProto.LightFrame frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frames(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LightFrameTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
  }
  // repeated .vmdProto.LightFrame frames = 2;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LightFrameTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LightFrameTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LightFrameTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LightFrameTable::MergeFrom(const LightFrameTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LightFrameTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightFrameTable::CopyFrom(const LightFrameTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightFrameTable::IsInitialized() const {
  
  for (int i = 0; i < frames_size(); i++) {
    if (!this->frames(i).IsInitialized()) return false;
  }
  return true;
}

void LightFrameTable::Swap(LightFrameTable* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LightFrameTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LightFrameTable_descriptor_;
  metadata.reflection = LightFrameTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelfShadowFrameTable::kIdFieldNumber;
const int SelfShadowFrameTable::kFramesFieldNumber;
#endif  // !_MSC_VER

SelfShadowFrameTable::SelfShadowFrameTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelfShadowFrameTable::InitAsDefaultInstance() {
}

SelfShadowFrameTable::SelfShadowFrameTable(const SelfShadowFrameTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelfShadowFrameTable::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelfShadowFrameTable::~SelfShadowFrameTable() {
  SharedDtor();
}

void SelfShadowFrameTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelfShadowFrameTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelfShadowFrameTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelfShadowFrameTable_descriptor_;
}

const SelfShadowFrameTable& SelfShadowFrameTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

SelfShadowFrameTable* SelfShadowFrameTable::default_instance_ = NULL;

SelfShadowFrameTable* SelfShadowFrameTable::New() const {
  return new SelfShadowFrameTable;
}

void SelfShadowFrameTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelfShadowFrameTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        break;
      }
      
      // repeated .vmdProto.SelfShadowFrame frames = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_frames;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelfShadowFrameTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }
  
  // repeated .vmdProto.SelfShadowFrame frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->frames(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelfShadowFrameTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }
  
  // repeated .vmdProto.SelfShadowFrame frames = 2;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->frames(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelfShadowFrameTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }
    
  }
  // repeated .vmdProto.SelfShadowFrame frames = 2;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelfShadowFrameTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelfShadowFrameTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelfShadowFrameTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelfShadowFrameTable::MergeFrom(const SelfShadowFrameTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelfShadowFrameTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelfShadowFrameTable::CopyFrom(const SelfShadowFrameTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelfShadowFrameTable::IsInitialized() const {
  
  for (int i = 0; i < frames_size(); i++) {
    if (!this->frames(i).IsInitialized()) return false;
  }
  return true;
}

void SelfShadowFrameTable::Swap(SelfShadowFrameTable* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelfShadowFrameTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelfShadowFrameTable_descriptor_;
  metadata.reflection = SelfShadowFrameTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VocaloidMotionData::kHeaderFieldNumber;
const int VocaloidMotionData::kBoneIDTableFieldNumber;
const int VocaloidMotionData::kMorphIDTableFieldNumber;
const int VocaloidMotionData::kCameraIDTableFieldNumber;
const int VocaloidMotionData::kLightIDTableFieldNumber;
const int VocaloidMotionData::kSelfShadowIDTableFieldNumber;
const int VocaloidMotionData::kBoneFrameTablesFieldNumber;
const int VocaloidMotionData::kMorphFrameTablesFieldNumber;
const int VocaloidMotionData::kCameraFrameTablesFieldNumber;
const int VocaloidMotionData::kLightFrameTablesFieldNumber;
const int VocaloidMotionData::kSelfShadowFrameTablesFieldNumber;
const int VocaloidMotionData::kShowIKFramesFieldNumber;
#endif  // !_MSC_VER

VocaloidMotionData::VocaloidMotionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VocaloidMotionData::InitAsDefaultInstance() {
  header_ = const_cast< ::vmdProto::Header*>(&::vmdProto::Header::default_instance());
}

VocaloidMotionData::VocaloidMotionData(const VocaloidMotionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VocaloidMotionData::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VocaloidMotionData::~VocaloidMotionData() {
  SharedDtor();
}

void VocaloidMotionData::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void VocaloidMotionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VocaloidMotionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VocaloidMotionData_descriptor_;
}

const VocaloidMotionData& VocaloidMotionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vme_2eproto();  return *default_instance_;
}

VocaloidMotionData* VocaloidMotionData::default_instance_ = NULL;

VocaloidMotionData* VocaloidMotionData::New() const {
  return new VocaloidMotionData;
}

void VocaloidMotionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::vmdProto::Header::Clear();
    }
  }
  boneidtable_.Clear();
  morphidtable_.Clear();
  cameraidtable_.Clear();
  lightidtable_.Clear();
  selfshadowidtable_.Clear();
  boneframetables_.Clear();
  morphframetables_.Clear();
  cameraframetables_.Clear();
  lightframetables_.Clear();
  selfshadowframetables_.Clear();
  showikframes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VocaloidMotionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmdProto.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_boneIDTable;
        break;
      }
      
      // repeated .vmdProto.IDTag boneIDTable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boneIDTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boneidtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_boneIDTable;
        if (input->ExpectTag(26)) goto parse_morphIDTable;
        break;
      }
      
      // repeated .vmdProto.IDTag morphIDTable = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_morphIDTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_morphidtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_morphIDTable;
        if (input->ExpectTag(34)) goto parse_cameraIDTable;
        break;
      }
      
      // repeated .vmdProto.IDTag cameraIDTable = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraIDTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cameraidtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cameraIDTable;
        if (input->ExpectTag(42)) goto parse_lightIDTable;
        break;
      }
      
      // repeated .vmdProto.IDTag lightIDTable = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lightIDTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lightidtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lightIDTable;
        if (input->ExpectTag(50)) goto parse_selfShadowIDTable;
        break;
      }
      
      // repeated .vmdProto.IDTag selfShadowIDTable = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfShadowIDTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selfshadowidtable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_selfShadowIDTable;
        if (input->ExpectTag(58)) goto parse_boneFrameTables;
        break;
      }
      
      // repeated .vmdProto.BoneFrameTable boneFrameTables = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boneFrameTables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boneframetables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_boneFrameTables;
        if (input->ExpectTag(66)) goto parse_morphFrameTables;
        break;
      }
      
      // repeated .vmdProto.MorphFrameTable morphFrameTables = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_morphFrameTables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_morphframetables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_morphFrameTables;
        if (input->ExpectTag(74)) goto parse_cameraFrameTables;
        break;
      }
      
      // repeated .vmdProto.CameraFrameTable cameraFrameTables = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cameraFrameTables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cameraframetables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_cameraFrameTables;
        if (input->ExpectTag(82)) goto parse_lightFrameTables;
        break;
      }
      
      // repeated .vmdProto.LightFrameTable lightFrameTables = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lightFrameTables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lightframetables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_lightFrameTables;
        if (input->ExpectTag(90)) goto parse_selfShadowFrameTables;
        break;
      }
      
      // repeated .vmdProto.SelfShadowFrameTable selfShadowFrameTables = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selfShadowFrameTables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selfshadowframetables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_selfShadowFrameTables;
        if (input->ExpectTag(98)) goto parse_showIKFrames;
        break;
      }
      
      // repeated .vmdProto.ShowIKFrame showIKFrames = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_showIKFrames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_showikframes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_showIKFrames;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VocaloidMotionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmdProto.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // repeated .vmdProto.IDTag boneIDTable = 2;
  for (int i = 0; i < this->boneidtable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boneidtable(i), output);
  }
  
  // repeated .vmdProto.IDTag morphIDTable = 3;
  for (int i = 0; i < this->morphidtable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->morphidtable(i), output);
  }
  
  // repeated .vmdProto.IDTag cameraIDTable = 4;
  for (int i = 0; i < this->cameraidtable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cameraidtable(i), output);
  }
  
  // repeated .vmdProto.IDTag lightIDTable = 5;
  for (int i = 0; i < this->lightidtable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lightidtable(i), output);
  }
  
  // repeated .vmdProto.IDTag selfShadowIDTable = 6;
  for (int i = 0; i < this->selfshadowidtable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->selfshadowidtable(i), output);
  }
  
  // repeated .vmdProto.BoneFrameTable boneFrameTables = 7;
  for (int i = 0; i < this->boneframetables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->boneframetables(i), output);
  }
  
  // repeated .vmdProto.MorphFrameTable morphFrameTables = 8;
  for (int i = 0; i < this->morphframetables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->morphframetables(i), output);
  }
  
  // repeated .vmdProto.CameraFrameTable cameraFrameTables = 9;
  for (int i = 0; i < this->cameraframetables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->cameraframetables(i), output);
  }
  
  // repeated .vmdProto.LightFrameTable lightFrameTables = 10;
  for (int i = 0; i < this->lightframetables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->lightframetables(i), output);
  }
  
  // repeated .vmdProto.SelfShadowFrameTable selfShadowFrameTables = 11;
  for (int i = 0; i < this->selfshadowframetables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->selfshadowframetables(i), output);
  }
  
  // repeated .vmdProto.ShowIKFrame showIKFrames = 12;
  for (int i = 0; i < this->showikframes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->showikframes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VocaloidMotionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vmdProto.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // repeated .vmdProto.IDTag boneIDTable = 2;
  for (int i = 0; i < this->boneidtable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->boneidtable(i), target);
  }
  
  // repeated .vmdProto.IDTag morphIDTable = 3;
  for (int i = 0; i < this->morphidtable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->morphidtable(i), target);
  }
  
  // repeated .vmdProto.IDTag cameraIDTable = 4;
  for (int i = 0; i < this->cameraidtable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cameraidtable(i), target);
  }
  
  // repeated .vmdProto.IDTag lightIDTable = 5;
  for (int i = 0; i < this->lightidtable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->lightidtable(i), target);
  }
  
  // repeated .vmdProto.IDTag selfShadowIDTable = 6;
  for (int i = 0; i < this->selfshadowidtable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->selfshadowidtable(i), target);
  }
  
  // repeated .vmdProto.BoneFrameTable boneFrameTables = 7;
  for (int i = 0; i < this->boneframetables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->boneframetables(i), target);
  }
  
  // repeated .vmdProto.MorphFrameTable morphFrameTables = 8;
  for (int i = 0; i < this->morphframetables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->morphframetables(i), target);
  }
  
  // repeated .vmdProto.CameraFrameTable cameraFrameTables = 9;
  for (int i = 0; i < this->cameraframetables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->cameraframetables(i), target);
  }
  
  // repeated .vmdProto.LightFrameTable lightFrameTables = 10;
  for (int i = 0; i < this->lightframetables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->lightframetables(i), target);
  }
  
  // repeated .vmdProto.SelfShadowFrameTable selfShadowFrameTables = 11;
  for (int i = 0; i < this->selfshadowframetables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->selfshadowframetables(i), target);
  }
  
  // repeated .vmdProto.ShowIKFrame showIKFrames = 12;
  for (int i = 0; i < this->showikframes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->showikframes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VocaloidMotionData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmdProto.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
  }
  // repeated .vmdProto.IDTag boneIDTable = 2;
  total_size += 1 * this->boneidtable_size();
  for (int i = 0; i < this->boneidtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boneidtable(i));
  }
  
  // repeated .vmdProto.IDTag morphIDTable = 3;
  total_size += 1 * this->morphidtable_size();
  for (int i = 0; i < this->morphidtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->morphidtable(i));
  }
  
  // repeated .vmdProto.IDTag cameraIDTable = 4;
  total_size += 1 * this->cameraidtable_size();
  for (int i = 0; i < this->cameraidtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cameraidtable(i));
  }
  
  // repeated .vmdProto.IDTag lightIDTable = 5;
  total_size += 1 * this->lightidtable_size();
  for (int i = 0; i < this->lightidtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lightidtable(i));
  }
  
  // repeated .vmdProto.IDTag selfShadowIDTable = 6;
  total_size += 1 * this->selfshadowidtable_size();
  for (int i = 0; i < this->selfshadowidtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selfshadowidtable(i));
  }
  
  // repeated .vmdProto.BoneFrameTable boneFrameTables = 7;
  total_size += 1 * this->boneframetables_size();
  for (int i = 0; i < this->boneframetables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boneframetables(i));
  }
  
  // repeated .vmdProto.MorphFrameTable morphFrameTables = 8;
  total_size += 1 * this->morphframetables_size();
  for (int i = 0; i < this->morphframetables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->morphframetables(i));
  }
  
  // repeated .vmdProto.CameraFrameTable cameraFrameTables = 9;
  total_size += 1 * this->cameraframetables_size();
  for (int i = 0; i < this->cameraframetables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cameraframetables(i));
  }
  
  // repeated .vmdProto.LightFrameTable lightFrameTables = 10;
  total_size += 1 * this->lightframetables_size();
  for (int i = 0; i < this->lightframetables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lightframetables(i));
  }
  
  // repeated .vmdProto.SelfShadowFrameTable selfShadowFrameTables = 11;
  total_size += 1 * this->selfshadowframetables_size();
  for (int i = 0; i < this->selfshadowframetables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selfshadowframetables(i));
  }
  
  // repeated .vmdProto.ShowIKFrame showIKFrames = 12;
  total_size += 1 * this->showikframes_size();
  for (int i = 0; i < this->showikframes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->showikframes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VocaloidMotionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VocaloidMotionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VocaloidMotionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VocaloidMotionData::MergeFrom(const VocaloidMotionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  boneidtable_.MergeFrom(from.boneidtable_);
  morphidtable_.MergeFrom(from.morphidtable_);
  cameraidtable_.MergeFrom(from.cameraidtable_);
  lightidtable_.MergeFrom(from.lightidtable_);
  selfshadowidtable_.MergeFrom(from.selfshadowidtable_);
  boneframetables_.MergeFrom(from.boneframetables_);
  morphframetables_.MergeFrom(from.morphframetables_);
  cameraframetables_.MergeFrom(from.cameraframetables_);
  lightframetables_.MergeFrom(from.lightframetables_);
  selfshadowframetables_.MergeFrom(from.selfshadowframetables_);
  showikframes_.MergeFrom(from.showikframes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::vmdProto::Header::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VocaloidMotionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VocaloidMotionData::CopyFrom(const VocaloidMotionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VocaloidMotionData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  for (int i = 0; i < boneidtable_size(); i++) {
    if (!this->boneidtable(i).IsInitialized()) return false;
  }
  for (int i = 0; i < morphidtable_size(); i++) {
    if (!this->morphidtable(i).IsInitialized()) return false;
  }
  for (int i = 0; i < cameraidtable_size(); i++) {
    if (!this->cameraidtable(i).IsInitialized()) return false;
  }
  for (int i = 0; i < lightidtable_size(); i++) {
    if (!this->lightidtable(i).IsInitialized()) return false;
  }
  for (int i = 0; i < selfshadowidtable_size(); i++) {
    if (!this->selfshadowidtable(i).IsInitialized()) return false;
  }
  for (int i = 0; i < boneframetables_size(); i++) {
    if (!this->boneframetables(i).IsInitialized()) return false;
  }
  for (int i = 0; i < morphframetables_size(); i++) {
    if (!this->morphframetables(i).IsInitialized()) return false;
  }
  for (int i = 0; i < cameraframetables_size(); i++) {
    if (!this->cameraframetables(i).IsInitialized()) return false;
  }
  for (int i = 0; i < lightframetables_size(); i++) {
    if (!this->lightframetables(i).IsInitialized()) return false;
  }
  for (int i = 0; i < selfshadowframetables_size(); i++) {
    if (!this->selfshadowframetables(i).IsInitialized()) return false;
  }
  for (int i = 0; i < showikframes_size(); i++) {
    if (!this->showikframes(i).IsInitialized()) return false;
  }
  return true;
}

void VocaloidMotionData::Swap(VocaloidMotionData* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    boneidtable_.Swap(&other->boneidtable_);
    morphidtable_.Swap(&other->morphidtable_);
    cameraidtable_.Swap(&other->cameraidtable_);
    lightidtable_.Swap(&other->lightidtable_);
    selfshadowidtable_.Swap(&other->selfshadowidtable_);
    boneframetables_.Swap(&other->boneframetables_);
    morphframetables_.Swap(&other->morphframetables_);
    cameraframetables_.Swap(&other->cameraframetables_);
    lightframetables_.Swap(&other->lightframetables_);
    selfshadowframetables_.Swap(&other->selfshadowframetables_);
    showikframes_.Swap(&other->showikframes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VocaloidMotionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VocaloidMotionData_descriptor_;
  metadata.reflection = VocaloidMotionData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmdProto

// @@protoc_insertion_point(global_scope)
