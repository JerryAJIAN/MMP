// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vme.proto

#ifndef PROTOBUF_vme_2eproto__INCLUDED
#define PROTOBUF_vme_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace vmdProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_vme_2eproto();
void protobuf_AssignDesc_vme_2eproto();
void protobuf_ShutdownFile_vme_2eproto();

class vec2;
class vec3;
class vec4;
class Header;
class IDTag;
class BezInterpolParams;
class BoneFrame;
class MorphFrame;
class CameraFrame;
class LightFrame;
class SelfShadowFrame;
class IKInfo;
class ShowIKFrame;
class BoneFrameTable;
class MorphFrameTable;
class CameraFrameTable;
class LightFrameTable;
class SelfShadowFrameTable;
class VocaloidMotionData;

// ===================================================================

class vec2 : public ::google::protobuf::Message {
 public:
  vec2();
  virtual ~vec2();
  
  vec2(const vec2& from);
  
  inline vec2& operator=(const vec2& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const vec2& default_instance();
  
  void Swap(vec2* other);
  
  // implements Message ----------------------------------------------
  
  vec2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const vec2& from);
  void MergeFrom(const vec2& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // @@protoc_insertion_point(class_scope:vmdProto.vec2)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static vec2* default_instance_;
};
// -------------------------------------------------------------------

class vec3 : public ::google::protobuf::Message {
 public:
  vec3();
  virtual ~vec3();
  
  vec3(const vec3& from);
  
  inline vec3& operator=(const vec3& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const vec3& default_instance();
  
  void Swap(vec3* other);
  
  // implements Message ----------------------------------------------
  
  vec3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const vec3& from);
  void MergeFrom(const vec3& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // @@protoc_insertion_point(class_scope:vmdProto.vec3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float z_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static vec3* default_instance_;
};
// -------------------------------------------------------------------

class vec4 : public ::google::protobuf::Message {
 public:
  vec4();
  virtual ~vec4();
  
  vec4(const vec4& from);
  
  inline vec4& operator=(const vec4& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const vec4& default_instance();
  
  void Swap(vec4* other);
  
  // implements Message ----------------------------------------------
  
  vec4* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const vec4& from);
  void MergeFrom(const vec4& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // required float w = 4;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 4;
  inline float w() const;
  inline void set_w(float value);
  
  // @@protoc_insertion_point(class_scope:vmdProto.vec4)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_w();
  inline void clear_has_w();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float z_;
  float w_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static vec4* default_instance_;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();
  
  Header(const Header& from);
  
  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();
  
  void Swap(Header* other);
  
  // implements Message ----------------------------------------------
  
  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string versionInfo = 1;
  inline bool has_versioninfo() const;
  inline void clear_versioninfo();
  static const int kVersionInfoFieldNumber = 1;
  inline const ::std::string& versioninfo() const;
  inline void set_versioninfo(const ::std::string& value);
  inline void set_versioninfo(const char* value);
  inline void set_versioninfo(const char* value, size_t size);
  inline ::std::string* mutable_versioninfo();
  inline ::std::string* release_versioninfo();
  
  // repeated string modelInfo = 2;
  inline int modelinfo_size() const;
  inline void clear_modelinfo();
  static const int kModelInfoFieldNumber = 2;
  inline const ::std::string& modelinfo(int index) const;
  inline ::std::string* mutable_modelinfo(int index);
  inline void set_modelinfo(int index, const ::std::string& value);
  inline void set_modelinfo(int index, const char* value);
  inline void set_modelinfo(int index, const char* value, size_t size);
  inline ::std::string* add_modelinfo();
  inline void add_modelinfo(const ::std::string& value);
  inline void add_modelinfo(const char* value);
  inline void add_modelinfo(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& modelinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_modelinfo();
  
  // @@protoc_insertion_point(class_scope:vmdProto.Header)
 private:
  inline void set_has_versioninfo();
  inline void clear_has_versioninfo();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* versioninfo_;
  ::google::protobuf::RepeatedPtrField< ::std::string> modelinfo_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class IDTag : public ::google::protobuf::Message {
 public:
  IDTag();
  virtual ~IDTag();
  
  IDTag(const IDTag& from);
  
  inline IDTag& operator=(const IDTag& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IDTag& default_instance();
  
  void Swap(IDTag* other);
  
  // implements Message ----------------------------------------------
  
  IDTag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IDTag& from);
  void MergeFrom(const IDTag& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:vmdProto.IDTag)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static IDTag* default_instance_;
};
// -------------------------------------------------------------------

class BezInterpolParams : public ::google::protobuf::Message {
 public:
  BezInterpolParams();
  virtual ~BezInterpolParams();
  
  BezInterpolParams(const BezInterpolParams& from);
  
  inline BezInterpolParams& operator=(const BezInterpolParams& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BezInterpolParams& default_instance();
  
  void Swap(BezInterpolParams* other);
  
  // implements Message ----------------------------------------------
  
  BezInterpolParams* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BezInterpolParams& from);
  void MergeFrom(const BezInterpolParams& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .vmdProto.vec2 X1 = 1;
  inline bool has_x1() const;
  inline void clear_x1();
  static const int kX1FieldNumber = 1;
  inline const ::vmdProto::vec2& x1() const;
  inline ::vmdProto::vec2* mutable_x1();
  inline ::vmdProto::vec2* release_x1();
  
  // required .vmdProto.vec2 X2 = 2;
  inline bool has_x2() const;
  inline void clear_x2();
  static const int kX2FieldNumber = 2;
  inline const ::vmdProto::vec2& x2() const;
  inline ::vmdProto::vec2* mutable_x2();
  inline ::vmdProto::vec2* release_x2();
  
  // required .vmdProto.vec2 Y1 = 3;
  inline bool has_y1() const;
  inline void clear_y1();
  static const int kY1FieldNumber = 3;
  inline const ::vmdProto::vec2& y1() const;
  inline ::vmdProto::vec2* mutable_y1();
  inline ::vmdProto::vec2* release_y1();
  
  // required .vmdProto.vec2 Y2 = 4;
  inline bool has_y2() const;
  inline void clear_y2();
  static const int kY2FieldNumber = 4;
  inline const ::vmdProto::vec2& y2() const;
  inline ::vmdProto::vec2* mutable_y2();
  inline ::vmdProto::vec2* release_y2();
  
  // required .vmdProto.vec2 Z1 = 5;
  inline bool has_z1() const;
  inline void clear_z1();
  static const int kZ1FieldNumber = 5;
  inline const ::vmdProto::vec2& z1() const;
  inline ::vmdProto::vec2* mutable_z1();
  inline ::vmdProto::vec2* release_z1();
  
  // required .vmdProto.vec2 Z2 = 6;
  inline bool has_z2() const;
  inline void clear_z2();
  static const int kZ2FieldNumber = 6;
  inline const ::vmdProto::vec2& z2() const;
  inline ::vmdProto::vec2* mutable_z2();
  inline ::vmdProto::vec2* release_z2();
  
  // required .vmdProto.vec2 R1 = 7;
  inline bool has_r1() const;
  inline void clear_r1();
  static const int kR1FieldNumber = 7;
  inline const ::vmdProto::vec2& r1() const;
  inline ::vmdProto::vec2* mutable_r1();
  inline ::vmdProto::vec2* release_r1();
  
  // required .vmdProto.vec2 R2 = 8;
  inline bool has_r2() const;
  inline void clear_r2();
  static const int kR2FieldNumber = 8;
  inline const ::vmdProto::vec2& r2() const;
  inline ::vmdProto::vec2* mutable_r2();
  inline ::vmdProto::vec2* release_r2();
  
  // @@protoc_insertion_point(class_scope:vmdProto.BezInterpolParams)
 private:
  inline void set_has_x1();
  inline void clear_has_x1();
  inline void set_has_x2();
  inline void clear_has_x2();
  inline void set_has_y1();
  inline void clear_has_y1();
  inline void set_has_y2();
  inline void clear_has_y2();
  inline void set_has_z1();
  inline void clear_has_z1();
  inline void set_has_z2();
  inline void clear_has_z2();
  inline void set_has_r1();
  inline void clear_has_r1();
  inline void set_has_r2();
  inline void clear_has_r2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::vmdProto::vec2* x1_;
  ::vmdProto::vec2* x2_;
  ::vmdProto::vec2* y1_;
  ::vmdProto::vec2* y2_;
  ::vmdProto::vec2* z1_;
  ::vmdProto::vec2* z2_;
  ::vmdProto::vec2* r1_;
  ::vmdProto::vec2* r2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static BezInterpolParams* default_instance_;
};
// -------------------------------------------------------------------

class BoneFrame : public ::google::protobuf::Message {
 public:
  BoneFrame();
  virtual ~BoneFrame();
  
  BoneFrame(const BoneFrame& from);
  
  inline BoneFrame& operator=(const BoneFrame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BoneFrame& default_instance();
  
  void Swap(BoneFrame* other);
  
  // implements Message ----------------------------------------------
  
  BoneFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoneFrame& from);
  void MergeFrom(const BoneFrame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 frameNumber = 1;
  inline bool has_framenumber() const;
  inline void clear_framenumber();
  static const int kFrameNumberFieldNumber = 1;
  inline ::google::protobuf::uint64 framenumber() const;
  inline void set_framenumber(::google::protobuf::uint64 value);
  
  // required .vmdProto.vec3 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::vmdProto::vec3& position() const;
  inline ::vmdProto::vec3* mutable_position();
  inline ::vmdProto::vec3* release_position();
  
  // required .vmdProto.vec4 rotation = 3;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 3;
  inline const ::vmdProto::vec4& rotation() const;
  inline ::vmdProto::vec4* mutable_rotation();
  inline ::vmdProto::vec4* release_rotation();
  
  // optional .vmdProto.BezInterpolParams interpolParameters = 4;
  inline bool has_interpolparameters() const;
  inline void clear_interpolparameters();
  static const int kInterpolParametersFieldNumber = 4;
  inline const ::vmdProto::BezInterpolParams& interpolparameters() const;
  inline ::vmdProto::BezInterpolParams* mutable_interpolparameters();
  inline ::vmdProto::BezInterpolParams* release_interpolparameters();
  
  // @@protoc_insertion_point(class_scope:vmdProto.BoneFrame)
 private:
  inline void set_has_framenumber();
  inline void clear_has_framenumber();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_rotation();
  inline void clear_has_rotation();
  inline void set_has_interpolparameters();
  inline void clear_has_interpolparameters();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 framenumber_;
  ::vmdProto::vec3* position_;
  ::vmdProto::vec4* rotation_;
  ::vmdProto::BezInterpolParams* interpolparameters_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static BoneFrame* default_instance_;
};
// -------------------------------------------------------------------

class MorphFrame : public ::google::protobuf::Message {
 public:
  MorphFrame();
  virtual ~MorphFrame();
  
  MorphFrame(const MorphFrame& from);
  
  inline MorphFrame& operator=(const MorphFrame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MorphFrame& default_instance();
  
  void Swap(MorphFrame* other);
  
  // implements Message ----------------------------------------------
  
  MorphFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MorphFrame& from);
  void MergeFrom(const MorphFrame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 frameNumber = 1;
  inline bool has_framenumber() const;
  inline void clear_framenumber();
  static const int kFrameNumberFieldNumber = 1;
  inline ::google::protobuf::uint64 framenumber() const;
  inline void set_framenumber(::google::protobuf::uint64 value);
  
  // required float value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value() const;
  inline void set_value(float value);
  
  // @@protoc_insertion_point(class_scope:vmdProto.MorphFrame)
 private:
  inline void set_has_framenumber();
  inline void clear_has_framenumber();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 framenumber_;
  float value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static MorphFrame* default_instance_;
};
// -------------------------------------------------------------------

class CameraFrame : public ::google::protobuf::Message {
 public:
  CameraFrame();
  virtual ~CameraFrame();
  
  CameraFrame(const CameraFrame& from);
  
  inline CameraFrame& operator=(const CameraFrame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraFrame& default_instance();
  
  void Swap(CameraFrame* other);
  
  // implements Message ----------------------------------------------
  
  CameraFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraFrame& from);
  void MergeFrom(const CameraFrame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 frameNumber = 1;
  inline bool has_framenumber() const;
  inline void clear_framenumber();
  static const int kFrameNumberFieldNumber = 1;
  inline ::google::protobuf::uint64 framenumber() const;
  inline void set_framenumber(::google::protobuf::uint64 value);
  
  // required .vmdProto.vec3 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::vmdProto::vec3& position() const;
  inline ::vmdProto::vec3* mutable_position();
  inline ::vmdProto::vec3* release_position();
  
  // required .vmdProto.vec3 rotation = 3;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 3;
  inline const ::vmdProto::vec3& rotation() const;
  inline ::vmdProto::vec3* mutable_rotation();
  inline ::vmdProto::vec3* release_rotation();
  
  // optional .vmdProto.BezInterpolParams interpolParameters = 4;
  inline bool has_interpolparameters() const;
  inline void clear_interpolparameters();
  static const int kInterpolParametersFieldNumber = 4;
  inline const ::vmdProto::BezInterpolParams& interpolparameters() const;
  inline ::vmdProto::BezInterpolParams* mutable_interpolparameters();
  inline ::vmdProto::BezInterpolParams* release_interpolparameters();
  
  // required uint64 viewAngle = 5;
  inline bool has_viewangle() const;
  inline void clear_viewangle();
  static const int kViewAngleFieldNumber = 5;
  inline ::google::protobuf::uint64 viewangle() const;
  inline void set_viewangle(::google::protobuf::uint64 value);
  
  // required uint32 perspective = 6;
  inline bool has_perspective() const;
  inline void clear_perspective();
  static const int kPerspectiveFieldNumber = 6;
  inline ::google::protobuf::uint32 perspective() const;
  inline void set_perspective(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:vmdProto.CameraFrame)
 private:
  inline void set_has_framenumber();
  inline void clear_has_framenumber();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_rotation();
  inline void clear_has_rotation();
  inline void set_has_interpolparameters();
  inline void clear_has_interpolparameters();
  inline void set_has_viewangle();
  inline void clear_has_viewangle();
  inline void set_has_perspective();
  inline void clear_has_perspective();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 framenumber_;
  ::vmdProto::vec3* position_;
  ::vmdProto::vec3* rotation_;
  ::vmdProto::BezInterpolParams* interpolparameters_;
  ::google::protobuf::uint64 viewangle_;
  ::google::protobuf::uint32 perspective_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static CameraFrame* default_instance_;
};
// -------------------------------------------------------------------

class LightFrame : public ::google::protobuf::Message {
 public:
  LightFrame();
  virtual ~LightFrame();
  
  LightFrame(const LightFrame& from);
  
  inline LightFrame& operator=(const LightFrame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LightFrame& default_instance();
  
  void Swap(LightFrame* other);
  
  // implements Message ----------------------------------------------
  
  LightFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LightFrame& from);
  void MergeFrom(const LightFrame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 frameNumber = 1;
  inline bool has_framenumber() const;
  inline void clear_framenumber();
  static const int kFrameNumberFieldNumber = 1;
  inline ::google::protobuf::uint64 framenumber() const;
  inline void set_framenumber(::google::protobuf::uint64 value);
  
  // required float distance = 2;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 2;
  inline float distance() const;
  inline void set_distance(float value);
  
  // required .vmdProto.vec3 color = 3;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 3;
  inline const ::vmdProto::vec3& color() const;
  inline ::vmdProto::vec3* mutable_color();
  inline ::vmdProto::vec3* release_color();
  
  // required .vmdProto.vec3 position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline const ::vmdProto::vec3& position() const;
  inline ::vmdProto::vec3* mutable_position();
  inline ::vmdProto::vec3* release_position();
  
  // @@protoc_insertion_point(class_scope:vmdProto.LightFrame)
 private:
  inline void set_has_framenumber();
  inline void clear_has_framenumber();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_position();
  inline void clear_has_position();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 framenumber_;
  ::vmdProto::vec3* color_;
  ::vmdProto::vec3* position_;
  float distance_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static LightFrame* default_instance_;
};
// -------------------------------------------------------------------

class SelfShadowFrame : public ::google::protobuf::Message {
 public:
  SelfShadowFrame();
  virtual ~SelfShadowFrame();
  
  SelfShadowFrame(const SelfShadowFrame& from);
  
  inline SelfShadowFrame& operator=(const SelfShadowFrame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelfShadowFrame& default_instance();
  
  void Swap(SelfShadowFrame* other);
  
  // implements Message ----------------------------------------------
  
  SelfShadowFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelfShadowFrame& from);
  void MergeFrom(const SelfShadowFrame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 frameNumber = 1;
  inline bool has_framenumber() const;
  inline void clear_framenumber();
  static const int kFrameNumberFieldNumber = 1;
  inline ::google::protobuf::uint64 framenumber() const;
  inline void set_framenumber(::google::protobuf::uint64 value);
  
  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // required float distance = 3;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 3;
  inline float distance() const;
  inline void set_distance(float value);
  
  // @@protoc_insertion_point(class_scope:vmdProto.SelfShadowFrame)
 private:
  inline void set_has_framenumber();
  inline void clear_has_framenumber();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_distance();
  inline void clear_has_distance();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 framenumber_;
  ::google::protobuf::uint32 type_;
  float distance_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static SelfShadowFrame* default_instance_;
};
// -------------------------------------------------------------------

class IKInfo : public ::google::protobuf::Message {
 public:
  IKInfo();
  virtual ~IKInfo();
  
  IKInfo(const IKInfo& from);
  
  inline IKInfo& operator=(const IKInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IKInfo& default_instance();
  
  void Swap(IKInfo* other);
  
  // implements Message ----------------------------------------------
  
  IKInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IKInfo& from);
  void MergeFrom(const IKInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // required uint32 isOn = 2;
  inline bool has_ison() const;
  inline void clear_ison();
  static const int kIsOnFieldNumber = 2;
  inline ::google::protobuf::uint32 ison() const;
  inline void set_ison(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:vmdProto.IKInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ison();
  inline void clear_has_ison();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 ison_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static IKInfo* default_instance_;
};
// -------------------------------------------------------------------

class ShowIKFrame : public ::google::protobuf::Message {
 public:
  ShowIKFrame();
  virtual ~ShowIKFrame();
  
  ShowIKFrame(const ShowIKFrame& from);
  
  inline ShowIKFrame& operator=(const ShowIKFrame& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowIKFrame& default_instance();
  
  void Swap(ShowIKFrame* other);
  
  // implements Message ----------------------------------------------
  
  ShowIKFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShowIKFrame& from);
  void MergeFrom(const ShowIKFrame& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 frame = 1;
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 1;
  inline ::google::protobuf::uint64 frame() const;
  inline void set_frame(::google::protobuf::uint64 value);
  
  // required uint32 show = 2;
  inline bool has_show() const;
  inline void clear_show();
  static const int kShowFieldNumber = 2;
  inline ::google::protobuf::uint32 show() const;
  inline void set_show(::google::protobuf::uint32 value);
  
  // repeated .vmdProto.IKInfo ikInfo = 3;
  inline int ikinfo_size() const;
  inline void clear_ikinfo();
  static const int kIkInfoFieldNumber = 3;
  inline const ::vmdProto::IKInfo& ikinfo(int index) const;
  inline ::vmdProto::IKInfo* mutable_ikinfo(int index);
  inline ::vmdProto::IKInfo* add_ikinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::IKInfo >&
      ikinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::IKInfo >*
      mutable_ikinfo();
  
  // @@protoc_insertion_point(class_scope:vmdProto.ShowIKFrame)
 private:
  inline void set_has_frame();
  inline void clear_has_frame();
  inline void set_has_show();
  inline void clear_has_show();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 frame_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::IKInfo > ikinfo_;
  ::google::protobuf::uint32 show_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static ShowIKFrame* default_instance_;
};
// -------------------------------------------------------------------

class BoneFrameTable : public ::google::protobuf::Message {
 public:
  BoneFrameTable();
  virtual ~BoneFrameTable();
  
  BoneFrameTable(const BoneFrameTable& from);
  
  inline BoneFrameTable& operator=(const BoneFrameTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BoneFrameTable& default_instance();
  
  void Swap(BoneFrameTable* other);
  
  // implements Message ----------------------------------------------
  
  BoneFrameTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoneFrameTable& from);
  void MergeFrom(const BoneFrameTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // repeated .vmdProto.BoneFrame frames = 2;
  inline int frames_size() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 2;
  inline const ::vmdProto::BoneFrame& frames(int index) const;
  inline ::vmdProto::BoneFrame* mutable_frames(int index);
  inline ::vmdProto::BoneFrame* add_frames();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::BoneFrame >&
      frames() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::BoneFrame >*
      mutable_frames();
  
  // @@protoc_insertion_point(class_scope:vmdProto.BoneFrameTable)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::BoneFrame > frames_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static BoneFrameTable* default_instance_;
};
// -------------------------------------------------------------------

class MorphFrameTable : public ::google::protobuf::Message {
 public:
  MorphFrameTable();
  virtual ~MorphFrameTable();
  
  MorphFrameTable(const MorphFrameTable& from);
  
  inline MorphFrameTable& operator=(const MorphFrameTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MorphFrameTable& default_instance();
  
  void Swap(MorphFrameTable* other);
  
  // implements Message ----------------------------------------------
  
  MorphFrameTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MorphFrameTable& from);
  void MergeFrom(const MorphFrameTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // repeated .vmdProto.MorphFrame frames = 2;
  inline int frames_size() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 2;
  inline const ::vmdProto::MorphFrame& frames(int index) const;
  inline ::vmdProto::MorphFrame* mutable_frames(int index);
  inline ::vmdProto::MorphFrame* add_frames();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::MorphFrame >&
      frames() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::MorphFrame >*
      mutable_frames();
  
  // @@protoc_insertion_point(class_scope:vmdProto.MorphFrameTable)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::MorphFrame > frames_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static MorphFrameTable* default_instance_;
};
// -------------------------------------------------------------------

class CameraFrameTable : public ::google::protobuf::Message {
 public:
  CameraFrameTable();
  virtual ~CameraFrameTable();
  
  CameraFrameTable(const CameraFrameTable& from);
  
  inline CameraFrameTable& operator=(const CameraFrameTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraFrameTable& default_instance();
  
  void Swap(CameraFrameTable* other);
  
  // implements Message ----------------------------------------------
  
  CameraFrameTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraFrameTable& from);
  void MergeFrom(const CameraFrameTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // repeated .vmdProto.CameraFrame frames = 2;
  inline int frames_size() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 2;
  inline const ::vmdProto::CameraFrame& frames(int index) const;
  inline ::vmdProto::CameraFrame* mutable_frames(int index);
  inline ::vmdProto::CameraFrame* add_frames();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::CameraFrame >&
      frames() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::CameraFrame >*
      mutable_frames();
  
  // @@protoc_insertion_point(class_scope:vmdProto.CameraFrameTable)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::CameraFrame > frames_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static CameraFrameTable* default_instance_;
};
// -------------------------------------------------------------------

class LightFrameTable : public ::google::protobuf::Message {
 public:
  LightFrameTable();
  virtual ~LightFrameTable();
  
  LightFrameTable(const LightFrameTable& from);
  
  inline LightFrameTable& operator=(const LightFrameTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LightFrameTable& default_instance();
  
  void Swap(LightFrameTable* other);
  
  // implements Message ----------------------------------------------
  
  LightFrameTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LightFrameTable& from);
  void MergeFrom(const LightFrameTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // repeated .vmdProto.LightFrame frames = 2;
  inline int frames_size() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 2;
  inline const ::vmdProto::LightFrame& frames(int index) const;
  inline ::vmdProto::LightFrame* mutable_frames(int index);
  inline ::vmdProto::LightFrame* add_frames();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::LightFrame >&
      frames() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::LightFrame >*
      mutable_frames();
  
  // @@protoc_insertion_point(class_scope:vmdProto.LightFrameTable)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::LightFrame > frames_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static LightFrameTable* default_instance_;
};
// -------------------------------------------------------------------

class SelfShadowFrameTable : public ::google::protobuf::Message {
 public:
  SelfShadowFrameTable();
  virtual ~SelfShadowFrameTable();
  
  SelfShadowFrameTable(const SelfShadowFrameTable& from);
  
  inline SelfShadowFrameTable& operator=(const SelfShadowFrameTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SelfShadowFrameTable& default_instance();
  
  void Swap(SelfShadowFrameTable* other);
  
  // implements Message ----------------------------------------------
  
  SelfShadowFrameTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelfShadowFrameTable& from);
  void MergeFrom(const SelfShadowFrameTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);
  
  // repeated .vmdProto.SelfShadowFrame frames = 2;
  inline int frames_size() const;
  inline void clear_frames();
  static const int kFramesFieldNumber = 2;
  inline const ::vmdProto::SelfShadowFrame& frames(int index) const;
  inline ::vmdProto::SelfShadowFrame* mutable_frames(int index);
  inline ::vmdProto::SelfShadowFrame* add_frames();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::SelfShadowFrame >&
      frames() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::SelfShadowFrame >*
      mutable_frames();
  
  // @@protoc_insertion_point(class_scope:vmdProto.SelfShadowFrameTable)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 id_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::SelfShadowFrame > frames_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static SelfShadowFrameTable* default_instance_;
};
// -------------------------------------------------------------------

class VocaloidMotionData : public ::google::protobuf::Message {
 public:
  VocaloidMotionData();
  virtual ~VocaloidMotionData();
  
  VocaloidMotionData(const VocaloidMotionData& from);
  
  inline VocaloidMotionData& operator=(const VocaloidMotionData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VocaloidMotionData& default_instance();
  
  void Swap(VocaloidMotionData* other);
  
  // implements Message ----------------------------------------------
  
  VocaloidMotionData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VocaloidMotionData& from);
  void MergeFrom(const VocaloidMotionData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .vmdProto.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::vmdProto::Header& header() const;
  inline ::vmdProto::Header* mutable_header();
  inline ::vmdProto::Header* release_header();
  
  // repeated .vmdProto.IDTag boneIDTable = 2;
  inline int boneidtable_size() const;
  inline void clear_boneidtable();
  static const int kBoneIDTableFieldNumber = 2;
  inline const ::vmdProto::IDTag& boneidtable(int index) const;
  inline ::vmdProto::IDTag* mutable_boneidtable(int index);
  inline ::vmdProto::IDTag* add_boneidtable();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >&
      boneidtable() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >*
      mutable_boneidtable();
  
  // repeated .vmdProto.IDTag morphIDTable = 3;
  inline int morphidtable_size() const;
  inline void clear_morphidtable();
  static const int kMorphIDTableFieldNumber = 3;
  inline const ::vmdProto::IDTag& morphidtable(int index) const;
  inline ::vmdProto::IDTag* mutable_morphidtable(int index);
  inline ::vmdProto::IDTag* add_morphidtable();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >&
      morphidtable() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >*
      mutable_morphidtable();
  
  // repeated .vmdProto.IDTag cameraIDTable = 4;
  inline int cameraidtable_size() const;
  inline void clear_cameraidtable();
  static const int kCameraIDTableFieldNumber = 4;
  inline const ::vmdProto::IDTag& cameraidtable(int index) const;
  inline ::vmdProto::IDTag* mutable_cameraidtable(int index);
  inline ::vmdProto::IDTag* add_cameraidtable();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >&
      cameraidtable() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >*
      mutable_cameraidtable();
  
  // repeated .vmdProto.IDTag lightIDTable = 5;
  inline int lightidtable_size() const;
  inline void clear_lightidtable();
  static const int kLightIDTableFieldNumber = 5;
  inline const ::vmdProto::IDTag& lightidtable(int index) const;
  inline ::vmdProto::IDTag* mutable_lightidtable(int index);
  inline ::vmdProto::IDTag* add_lightidtable();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >&
      lightidtable() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >*
      mutable_lightidtable();
  
  // repeated .vmdProto.IDTag selfShadowIDTable = 6;
  inline int selfshadowidtable_size() const;
  inline void clear_selfshadowidtable();
  static const int kSelfShadowIDTableFieldNumber = 6;
  inline const ::vmdProto::IDTag& selfshadowidtable(int index) const;
  inline ::vmdProto::IDTag* mutable_selfshadowidtable(int index);
  inline ::vmdProto::IDTag* add_selfshadowidtable();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >&
      selfshadowidtable() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >*
      mutable_selfshadowidtable();
  
  // repeated .vmdProto.BoneFrameTable boneFrameTables = 7;
  inline int boneframetables_size() const;
  inline void clear_boneframetables();
  static const int kBoneFrameTablesFieldNumber = 7;
  inline const ::vmdProto::BoneFrameTable& boneframetables(int index) const;
  inline ::vmdProto::BoneFrameTable* mutable_boneframetables(int index);
  inline ::vmdProto::BoneFrameTable* add_boneframetables();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::BoneFrameTable >&
      boneframetables() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::BoneFrameTable >*
      mutable_boneframetables();
  
  // repeated .vmdProto.MorphFrameTable morphFrameTables = 8;
  inline int morphframetables_size() const;
  inline void clear_morphframetables();
  static const int kMorphFrameTablesFieldNumber = 8;
  inline const ::vmdProto::MorphFrameTable& morphframetables(int index) const;
  inline ::vmdProto::MorphFrameTable* mutable_morphframetables(int index);
  inline ::vmdProto::MorphFrameTable* add_morphframetables();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::MorphFrameTable >&
      morphframetables() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::MorphFrameTable >*
      mutable_morphframetables();
  
  // repeated .vmdProto.CameraFrameTable cameraFrameTables = 9;
  inline int cameraframetables_size() const;
  inline void clear_cameraframetables();
  static const int kCameraFrameTablesFieldNumber = 9;
  inline const ::vmdProto::CameraFrameTable& cameraframetables(int index) const;
  inline ::vmdProto::CameraFrameTable* mutable_cameraframetables(int index);
  inline ::vmdProto::CameraFrameTable* add_cameraframetables();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::CameraFrameTable >&
      cameraframetables() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::CameraFrameTable >*
      mutable_cameraframetables();
  
  // repeated .vmdProto.LightFrameTable lightFrameTables = 10;
  inline int lightframetables_size() const;
  inline void clear_lightframetables();
  static const int kLightFrameTablesFieldNumber = 10;
  inline const ::vmdProto::LightFrameTable& lightframetables(int index) const;
  inline ::vmdProto::LightFrameTable* mutable_lightframetables(int index);
  inline ::vmdProto::LightFrameTable* add_lightframetables();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::LightFrameTable >&
      lightframetables() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::LightFrameTable >*
      mutable_lightframetables();
  
  // repeated .vmdProto.SelfShadowFrameTable selfShadowFrameTables = 11;
  inline int selfshadowframetables_size() const;
  inline void clear_selfshadowframetables();
  static const int kSelfShadowFrameTablesFieldNumber = 11;
  inline const ::vmdProto::SelfShadowFrameTable& selfshadowframetables(int index) const;
  inline ::vmdProto::SelfShadowFrameTable* mutable_selfshadowframetables(int index);
  inline ::vmdProto::SelfShadowFrameTable* add_selfshadowframetables();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::SelfShadowFrameTable >&
      selfshadowframetables() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::SelfShadowFrameTable >*
      mutable_selfshadowframetables();
  
  // repeated .vmdProto.ShowIKFrame showIKFrames = 12;
  inline int showikframes_size() const;
  inline void clear_showikframes();
  static const int kShowIKFramesFieldNumber = 12;
  inline const ::vmdProto::ShowIKFrame& showikframes(int index) const;
  inline ::vmdProto::ShowIKFrame* mutable_showikframes(int index);
  inline ::vmdProto::ShowIKFrame* add_showikframes();
  inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::ShowIKFrame >&
      showikframes() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmdProto::ShowIKFrame >*
      mutable_showikframes();
  
  // @@protoc_insertion_point(class_scope:vmdProto.VocaloidMotionData)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::vmdProto::Header* header_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag > boneidtable_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag > morphidtable_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag > cameraidtable_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag > lightidtable_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag > selfshadowidtable_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::BoneFrameTable > boneframetables_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::MorphFrameTable > morphframetables_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::CameraFrameTable > cameraframetables_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::LightFrameTable > lightframetables_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::SelfShadowFrameTable > selfshadowframetables_;
  ::google::protobuf::RepeatedPtrField< ::vmdProto::ShowIKFrame > showikframes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_vme_2eproto();
  friend void protobuf_AssignDesc_vme_2eproto();
  friend void protobuf_ShutdownFile_vme_2eproto();
  
  void InitAsDefaultInstance();
  static VocaloidMotionData* default_instance_;
};
// ===================================================================


// ===================================================================

// vec2

// required float x = 1;
inline bool vec2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vec2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void vec2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void vec2::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float vec2::x() const {
  return x_;
}
inline void vec2::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool vec2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void vec2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void vec2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void vec2::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float vec2::y() const {
  return y_;
}
inline void vec2::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// vec3

// required float x = 1;
inline bool vec3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vec3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void vec3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void vec3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float vec3::x() const {
  return x_;
}
inline void vec3::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool vec3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void vec3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void vec3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void vec3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float vec3::y() const {
  return y_;
}
inline void vec3::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool vec3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void vec3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void vec3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void vec3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float vec3::z() const {
  return z_;
}
inline void vec3::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// vec4

// required float x = 1;
inline bool vec4::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vec4::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void vec4::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void vec4::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float vec4::x() const {
  return x_;
}
inline void vec4::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool vec4::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void vec4::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void vec4::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void vec4::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float vec4::y() const {
  return y_;
}
inline void vec4::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool vec4::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void vec4::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void vec4::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void vec4::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float vec4::z() const {
  return z_;
}
inline void vec4::set_z(float value) {
  set_has_z();
  z_ = value;
}

// required float w = 4;
inline bool vec4::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void vec4::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void vec4::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void vec4::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float vec4::w() const {
  return w_;
}
inline void vec4::set_w(float value) {
  set_has_w();
  w_ = value;
}

// -------------------------------------------------------------------

// Header

// required string versionInfo = 1;
inline bool Header::has_versioninfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_versioninfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_versioninfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_versioninfo() {
  if (versioninfo_ != &::google::protobuf::internal::kEmptyString) {
    versioninfo_->clear();
  }
  clear_has_versioninfo();
}
inline const ::std::string& Header::versioninfo() const {
  return *versioninfo_;
}
inline void Header::set_versioninfo(const ::std::string& value) {
  set_has_versioninfo();
  if (versioninfo_ == &::google::protobuf::internal::kEmptyString) {
    versioninfo_ = new ::std::string;
  }
  versioninfo_->assign(value);
}
inline void Header::set_versioninfo(const char* value) {
  set_has_versioninfo();
  if (versioninfo_ == &::google::protobuf::internal::kEmptyString) {
    versioninfo_ = new ::std::string;
  }
  versioninfo_->assign(value);
}
inline void Header::set_versioninfo(const char* value, size_t size) {
  set_has_versioninfo();
  if (versioninfo_ == &::google::protobuf::internal::kEmptyString) {
    versioninfo_ = new ::std::string;
  }
  versioninfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Header::mutable_versioninfo() {
  set_has_versioninfo();
  if (versioninfo_ == &::google::protobuf::internal::kEmptyString) {
    versioninfo_ = new ::std::string;
  }
  return versioninfo_;
}
inline ::std::string* Header::release_versioninfo() {
  clear_has_versioninfo();
  if (versioninfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = versioninfo_;
    versioninfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string modelInfo = 2;
inline int Header::modelinfo_size() const {
  return modelinfo_.size();
}
inline void Header::clear_modelinfo() {
  modelinfo_.Clear();
}
inline const ::std::string& Header::modelinfo(int index) const {
  return modelinfo_.Get(index);
}
inline ::std::string* Header::mutable_modelinfo(int index) {
  return modelinfo_.Mutable(index);
}
inline void Header::set_modelinfo(int index, const ::std::string& value) {
  modelinfo_.Mutable(index)->assign(value);
}
inline void Header::set_modelinfo(int index, const char* value) {
  modelinfo_.Mutable(index)->assign(value);
}
inline void Header::set_modelinfo(int index, const char* value, size_t size) {
  modelinfo_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Header::add_modelinfo() {
  return modelinfo_.Add();
}
inline void Header::add_modelinfo(const ::std::string& value) {
  modelinfo_.Add()->assign(value);
}
inline void Header::add_modelinfo(const char* value) {
  modelinfo_.Add()->assign(value);
}
inline void Header::add_modelinfo(const char* value, size_t size) {
  modelinfo_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Header::modelinfo() const {
  return modelinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Header::mutable_modelinfo() {
  return &modelinfo_;
}

// -------------------------------------------------------------------

// IDTag

// required uint64 id = 1;
inline bool IDTag::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IDTag::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IDTag::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IDTag::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 IDTag::id() const {
  return id_;
}
inline void IDTag::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool IDTag::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IDTag::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IDTag::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IDTag::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& IDTag::name() const {
  return *name_;
}
inline void IDTag::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void IDTag::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void IDTag::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* IDTag::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* IDTag::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// BezInterpolParams

// required .vmdProto.vec2 X1 = 1;
inline bool BezInterpolParams::has_x1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BezInterpolParams::set_has_x1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BezInterpolParams::clear_has_x1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BezInterpolParams::clear_x1() {
  if (x1_ != NULL) x1_->::vmdProto::vec2::Clear();
  clear_has_x1();
}
inline const ::vmdProto::vec2& BezInterpolParams::x1() const {
  return x1_ != NULL ? *x1_ : *default_instance_->x1_;
}
inline ::vmdProto::vec2* BezInterpolParams::mutable_x1() {
  set_has_x1();
  if (x1_ == NULL) x1_ = new ::vmdProto::vec2;
  return x1_;
}
inline ::vmdProto::vec2* BezInterpolParams::release_x1() {
  clear_has_x1();
  ::vmdProto::vec2* temp = x1_;
  x1_ = NULL;
  return temp;
}

// required .vmdProto.vec2 X2 = 2;
inline bool BezInterpolParams::has_x2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BezInterpolParams::set_has_x2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BezInterpolParams::clear_has_x2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BezInterpolParams::clear_x2() {
  if (x2_ != NULL) x2_->::vmdProto::vec2::Clear();
  clear_has_x2();
}
inline const ::vmdProto::vec2& BezInterpolParams::x2() const {
  return x2_ != NULL ? *x2_ : *default_instance_->x2_;
}
inline ::vmdProto::vec2* BezInterpolParams::mutable_x2() {
  set_has_x2();
  if (x2_ == NULL) x2_ = new ::vmdProto::vec2;
  return x2_;
}
inline ::vmdProto::vec2* BezInterpolParams::release_x2() {
  clear_has_x2();
  ::vmdProto::vec2* temp = x2_;
  x2_ = NULL;
  return temp;
}

// required .vmdProto.vec2 Y1 = 3;
inline bool BezInterpolParams::has_y1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BezInterpolParams::set_has_y1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BezInterpolParams::clear_has_y1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BezInterpolParams::clear_y1() {
  if (y1_ != NULL) y1_->::vmdProto::vec2::Clear();
  clear_has_y1();
}
inline const ::vmdProto::vec2& BezInterpolParams::y1() const {
  return y1_ != NULL ? *y1_ : *default_instance_->y1_;
}
inline ::vmdProto::vec2* BezInterpolParams::mutable_y1() {
  set_has_y1();
  if (y1_ == NULL) y1_ = new ::vmdProto::vec2;
  return y1_;
}
inline ::vmdProto::vec2* BezInterpolParams::release_y1() {
  clear_has_y1();
  ::vmdProto::vec2* temp = y1_;
  y1_ = NULL;
  return temp;
}

// required .vmdProto.vec2 Y2 = 4;
inline bool BezInterpolParams::has_y2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BezInterpolParams::set_has_y2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BezInterpolParams::clear_has_y2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BezInterpolParams::clear_y2() {
  if (y2_ != NULL) y2_->::vmdProto::vec2::Clear();
  clear_has_y2();
}
inline const ::vmdProto::vec2& BezInterpolParams::y2() const {
  return y2_ != NULL ? *y2_ : *default_instance_->y2_;
}
inline ::vmdProto::vec2* BezInterpolParams::mutable_y2() {
  set_has_y2();
  if (y2_ == NULL) y2_ = new ::vmdProto::vec2;
  return y2_;
}
inline ::vmdProto::vec2* BezInterpolParams::release_y2() {
  clear_has_y2();
  ::vmdProto::vec2* temp = y2_;
  y2_ = NULL;
  return temp;
}

// required .vmdProto.vec2 Z1 = 5;
inline bool BezInterpolParams::has_z1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BezInterpolParams::set_has_z1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BezInterpolParams::clear_has_z1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BezInterpolParams::clear_z1() {
  if (z1_ != NULL) z1_->::vmdProto::vec2::Clear();
  clear_has_z1();
}
inline const ::vmdProto::vec2& BezInterpolParams::z1() const {
  return z1_ != NULL ? *z1_ : *default_instance_->z1_;
}
inline ::vmdProto::vec2* BezInterpolParams::mutable_z1() {
  set_has_z1();
  if (z1_ == NULL) z1_ = new ::vmdProto::vec2;
  return z1_;
}
inline ::vmdProto::vec2* BezInterpolParams::release_z1() {
  clear_has_z1();
  ::vmdProto::vec2* temp = z1_;
  z1_ = NULL;
  return temp;
}

// required .vmdProto.vec2 Z2 = 6;
inline bool BezInterpolParams::has_z2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BezInterpolParams::set_has_z2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BezInterpolParams::clear_has_z2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BezInterpolParams::clear_z2() {
  if (z2_ != NULL) z2_->::vmdProto::vec2::Clear();
  clear_has_z2();
}
inline const ::vmdProto::vec2& BezInterpolParams::z2() const {
  return z2_ != NULL ? *z2_ : *default_instance_->z2_;
}
inline ::vmdProto::vec2* BezInterpolParams::mutable_z2() {
  set_has_z2();
  if (z2_ == NULL) z2_ = new ::vmdProto::vec2;
  return z2_;
}
inline ::vmdProto::vec2* BezInterpolParams::release_z2() {
  clear_has_z2();
  ::vmdProto::vec2* temp = z2_;
  z2_ = NULL;
  return temp;
}

// required .vmdProto.vec2 R1 = 7;
inline bool BezInterpolParams::has_r1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BezInterpolParams::set_has_r1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BezInterpolParams::clear_has_r1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BezInterpolParams::clear_r1() {
  if (r1_ != NULL) r1_->::vmdProto::vec2::Clear();
  clear_has_r1();
}
inline const ::vmdProto::vec2& BezInterpolParams::r1() const {
  return r1_ != NULL ? *r1_ : *default_instance_->r1_;
}
inline ::vmdProto::vec2* BezInterpolParams::mutable_r1() {
  set_has_r1();
  if (r1_ == NULL) r1_ = new ::vmdProto::vec2;
  return r1_;
}
inline ::vmdProto::vec2* BezInterpolParams::release_r1() {
  clear_has_r1();
  ::vmdProto::vec2* temp = r1_;
  r1_ = NULL;
  return temp;
}

// required .vmdProto.vec2 R2 = 8;
inline bool BezInterpolParams::has_r2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BezInterpolParams::set_has_r2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BezInterpolParams::clear_has_r2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BezInterpolParams::clear_r2() {
  if (r2_ != NULL) r2_->::vmdProto::vec2::Clear();
  clear_has_r2();
}
inline const ::vmdProto::vec2& BezInterpolParams::r2() const {
  return r2_ != NULL ? *r2_ : *default_instance_->r2_;
}
inline ::vmdProto::vec2* BezInterpolParams::mutable_r2() {
  set_has_r2();
  if (r2_ == NULL) r2_ = new ::vmdProto::vec2;
  return r2_;
}
inline ::vmdProto::vec2* BezInterpolParams::release_r2() {
  clear_has_r2();
  ::vmdProto::vec2* temp = r2_;
  r2_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// BoneFrame

// required uint64 frameNumber = 1;
inline bool BoneFrame::has_framenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoneFrame::set_has_framenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoneFrame::clear_has_framenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoneFrame::clear_framenumber() {
  framenumber_ = GOOGLE_ULONGLONG(0);
  clear_has_framenumber();
}
inline ::google::protobuf::uint64 BoneFrame::framenumber() const {
  return framenumber_;
}
inline void BoneFrame::set_framenumber(::google::protobuf::uint64 value) {
  set_has_framenumber();
  framenumber_ = value;
}

// required .vmdProto.vec3 position = 2;
inline bool BoneFrame::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoneFrame::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoneFrame::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoneFrame::clear_position() {
  if (position_ != NULL) position_->::vmdProto::vec3::Clear();
  clear_has_position();
}
inline const ::vmdProto::vec3& BoneFrame::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::vmdProto::vec3* BoneFrame::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::vmdProto::vec3;
  return position_;
}
inline ::vmdProto::vec3* BoneFrame::release_position() {
  clear_has_position();
  ::vmdProto::vec3* temp = position_;
  position_ = NULL;
  return temp;
}

// required .vmdProto.vec4 rotation = 3;
inline bool BoneFrame::has_rotation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BoneFrame::set_has_rotation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BoneFrame::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BoneFrame::clear_rotation() {
  if (rotation_ != NULL) rotation_->::vmdProto::vec4::Clear();
  clear_has_rotation();
}
inline const ::vmdProto::vec4& BoneFrame::rotation() const {
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
inline ::vmdProto::vec4* BoneFrame::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) rotation_ = new ::vmdProto::vec4;
  return rotation_;
}
inline ::vmdProto::vec4* BoneFrame::release_rotation() {
  clear_has_rotation();
  ::vmdProto::vec4* temp = rotation_;
  rotation_ = NULL;
  return temp;
}

// optional .vmdProto.BezInterpolParams interpolParameters = 4;
inline bool BoneFrame::has_interpolparameters() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BoneFrame::set_has_interpolparameters() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BoneFrame::clear_has_interpolparameters() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BoneFrame::clear_interpolparameters() {
  if (interpolparameters_ != NULL) interpolparameters_->::vmdProto::BezInterpolParams::Clear();
  clear_has_interpolparameters();
}
inline const ::vmdProto::BezInterpolParams& BoneFrame::interpolparameters() const {
  return interpolparameters_ != NULL ? *interpolparameters_ : *default_instance_->interpolparameters_;
}
inline ::vmdProto::BezInterpolParams* BoneFrame::mutable_interpolparameters() {
  set_has_interpolparameters();
  if (interpolparameters_ == NULL) interpolparameters_ = new ::vmdProto::BezInterpolParams;
  return interpolparameters_;
}
inline ::vmdProto::BezInterpolParams* BoneFrame::release_interpolparameters() {
  clear_has_interpolparameters();
  ::vmdProto::BezInterpolParams* temp = interpolparameters_;
  interpolparameters_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// MorphFrame

// required uint64 frameNumber = 1;
inline bool MorphFrame::has_framenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MorphFrame::set_has_framenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MorphFrame::clear_has_framenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MorphFrame::clear_framenumber() {
  framenumber_ = GOOGLE_ULONGLONG(0);
  clear_has_framenumber();
}
inline ::google::protobuf::uint64 MorphFrame::framenumber() const {
  return framenumber_;
}
inline void MorphFrame::set_framenumber(::google::protobuf::uint64 value) {
  set_has_framenumber();
  framenumber_ = value;
}

// required float value = 2;
inline bool MorphFrame::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MorphFrame::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MorphFrame::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MorphFrame::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float MorphFrame::value() const {
  return value_;
}
inline void MorphFrame::set_value(float value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// CameraFrame

// required uint64 frameNumber = 1;
inline bool CameraFrame::has_framenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraFrame::set_has_framenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraFrame::clear_has_framenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraFrame::clear_framenumber() {
  framenumber_ = GOOGLE_ULONGLONG(0);
  clear_has_framenumber();
}
inline ::google::protobuf::uint64 CameraFrame::framenumber() const {
  return framenumber_;
}
inline void CameraFrame::set_framenumber(::google::protobuf::uint64 value) {
  set_has_framenumber();
  framenumber_ = value;
}

// required .vmdProto.vec3 position = 2;
inline bool CameraFrame::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraFrame::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraFrame::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraFrame::clear_position() {
  if (position_ != NULL) position_->::vmdProto::vec3::Clear();
  clear_has_position();
}
inline const ::vmdProto::vec3& CameraFrame::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::vmdProto::vec3* CameraFrame::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::vmdProto::vec3;
  return position_;
}
inline ::vmdProto::vec3* CameraFrame::release_position() {
  clear_has_position();
  ::vmdProto::vec3* temp = position_;
  position_ = NULL;
  return temp;
}

// required .vmdProto.vec3 rotation = 3;
inline bool CameraFrame::has_rotation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraFrame::set_has_rotation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraFrame::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraFrame::clear_rotation() {
  if (rotation_ != NULL) rotation_->::vmdProto::vec3::Clear();
  clear_has_rotation();
}
inline const ::vmdProto::vec3& CameraFrame::rotation() const {
  return rotation_ != NULL ? *rotation_ : *default_instance_->rotation_;
}
inline ::vmdProto::vec3* CameraFrame::mutable_rotation() {
  set_has_rotation();
  if (rotation_ == NULL) rotation_ = new ::vmdProto::vec3;
  return rotation_;
}
inline ::vmdProto::vec3* CameraFrame::release_rotation() {
  clear_has_rotation();
  ::vmdProto::vec3* temp = rotation_;
  rotation_ = NULL;
  return temp;
}

// optional .vmdProto.BezInterpolParams interpolParameters = 4;
inline bool CameraFrame::has_interpolparameters() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraFrame::set_has_interpolparameters() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraFrame::clear_has_interpolparameters() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraFrame::clear_interpolparameters() {
  if (interpolparameters_ != NULL) interpolparameters_->::vmdProto::BezInterpolParams::Clear();
  clear_has_interpolparameters();
}
inline const ::vmdProto::BezInterpolParams& CameraFrame::interpolparameters() const {
  return interpolparameters_ != NULL ? *interpolparameters_ : *default_instance_->interpolparameters_;
}
inline ::vmdProto::BezInterpolParams* CameraFrame::mutable_interpolparameters() {
  set_has_interpolparameters();
  if (interpolparameters_ == NULL) interpolparameters_ = new ::vmdProto::BezInterpolParams;
  return interpolparameters_;
}
inline ::vmdProto::BezInterpolParams* CameraFrame::release_interpolparameters() {
  clear_has_interpolparameters();
  ::vmdProto::BezInterpolParams* temp = interpolparameters_;
  interpolparameters_ = NULL;
  return temp;
}

// required uint64 viewAngle = 5;
inline bool CameraFrame::has_viewangle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraFrame::set_has_viewangle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraFrame::clear_has_viewangle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraFrame::clear_viewangle() {
  viewangle_ = GOOGLE_ULONGLONG(0);
  clear_has_viewangle();
}
inline ::google::protobuf::uint64 CameraFrame::viewangle() const {
  return viewangle_;
}
inline void CameraFrame::set_viewangle(::google::protobuf::uint64 value) {
  set_has_viewangle();
  viewangle_ = value;
}

// required uint32 perspective = 6;
inline bool CameraFrame::has_perspective() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraFrame::set_has_perspective() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraFrame::clear_has_perspective() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraFrame::clear_perspective() {
  perspective_ = 0u;
  clear_has_perspective();
}
inline ::google::protobuf::uint32 CameraFrame::perspective() const {
  return perspective_;
}
inline void CameraFrame::set_perspective(::google::protobuf::uint32 value) {
  set_has_perspective();
  perspective_ = value;
}

// -------------------------------------------------------------------

// LightFrame

// required uint64 frameNumber = 1;
inline bool LightFrame::has_framenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LightFrame::set_has_framenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LightFrame::clear_has_framenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LightFrame::clear_framenumber() {
  framenumber_ = GOOGLE_ULONGLONG(0);
  clear_has_framenumber();
}
inline ::google::protobuf::uint64 LightFrame::framenumber() const {
  return framenumber_;
}
inline void LightFrame::set_framenumber(::google::protobuf::uint64 value) {
  set_has_framenumber();
  framenumber_ = value;
}

// required float distance = 2;
inline bool LightFrame::has_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LightFrame::set_has_distance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LightFrame::clear_has_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LightFrame::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float LightFrame::distance() const {
  return distance_;
}
inline void LightFrame::set_distance(float value) {
  set_has_distance();
  distance_ = value;
}

// required .vmdProto.vec3 color = 3;
inline bool LightFrame::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LightFrame::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LightFrame::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LightFrame::clear_color() {
  if (color_ != NULL) color_->::vmdProto::vec3::Clear();
  clear_has_color();
}
inline const ::vmdProto::vec3& LightFrame::color() const {
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::vmdProto::vec3* LightFrame::mutable_color() {
  set_has_color();
  if (color_ == NULL) color_ = new ::vmdProto::vec3;
  return color_;
}
inline ::vmdProto::vec3* LightFrame::release_color() {
  clear_has_color();
  ::vmdProto::vec3* temp = color_;
  color_ = NULL;
  return temp;
}

// required .vmdProto.vec3 position = 4;
inline bool LightFrame::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LightFrame::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LightFrame::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LightFrame::clear_position() {
  if (position_ != NULL) position_->::vmdProto::vec3::Clear();
  clear_has_position();
}
inline const ::vmdProto::vec3& LightFrame::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::vmdProto::vec3* LightFrame::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::vmdProto::vec3;
  return position_;
}
inline ::vmdProto::vec3* LightFrame::release_position() {
  clear_has_position();
  ::vmdProto::vec3* temp = position_;
  position_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// SelfShadowFrame

// required uint64 frameNumber = 1;
inline bool SelfShadowFrame::has_framenumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelfShadowFrame::set_has_framenumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelfShadowFrame::clear_has_framenumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelfShadowFrame::clear_framenumber() {
  framenumber_ = GOOGLE_ULONGLONG(0);
  clear_has_framenumber();
}
inline ::google::protobuf::uint64 SelfShadowFrame::framenumber() const {
  return framenumber_;
}
inline void SelfShadowFrame::set_framenumber(::google::protobuf::uint64 value) {
  set_has_framenumber();
  framenumber_ = value;
}

// required uint32 type = 2;
inline bool SelfShadowFrame::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelfShadowFrame::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SelfShadowFrame::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SelfShadowFrame::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 SelfShadowFrame::type() const {
  return type_;
}
inline void SelfShadowFrame::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required float distance = 3;
inline bool SelfShadowFrame::has_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SelfShadowFrame::set_has_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SelfShadowFrame::clear_has_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SelfShadowFrame::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline float SelfShadowFrame::distance() const {
  return distance_;
}
inline void SelfShadowFrame::set_distance(float value) {
  set_has_distance();
  distance_ = value;
}

// -------------------------------------------------------------------

// IKInfo

// required uint64 id = 1;
inline bool IKInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IKInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IKInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IKInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 IKInfo::id() const {
  return id_;
}
inline void IKInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required uint32 isOn = 2;
inline bool IKInfo::has_ison() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IKInfo::set_has_ison() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IKInfo::clear_has_ison() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IKInfo::clear_ison() {
  ison_ = 0u;
  clear_has_ison();
}
inline ::google::protobuf::uint32 IKInfo::ison() const {
  return ison_;
}
inline void IKInfo::set_ison(::google::protobuf::uint32 value) {
  set_has_ison();
  ison_ = value;
}

// -------------------------------------------------------------------

// ShowIKFrame

// required uint64 frame = 1;
inline bool ShowIKFrame::has_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowIKFrame::set_has_frame() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowIKFrame::clear_has_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowIKFrame::clear_frame() {
  frame_ = GOOGLE_ULONGLONG(0);
  clear_has_frame();
}
inline ::google::protobuf::uint64 ShowIKFrame::frame() const {
  return frame_;
}
inline void ShowIKFrame::set_frame(::google::protobuf::uint64 value) {
  set_has_frame();
  frame_ = value;
}

// required uint32 show = 2;
inline bool ShowIKFrame::has_show() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowIKFrame::set_has_show() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowIKFrame::clear_has_show() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowIKFrame::clear_show() {
  show_ = 0u;
  clear_has_show();
}
inline ::google::protobuf::uint32 ShowIKFrame::show() const {
  return show_;
}
inline void ShowIKFrame::set_show(::google::protobuf::uint32 value) {
  set_has_show();
  show_ = value;
}

// repeated .vmdProto.IKInfo ikInfo = 3;
inline int ShowIKFrame::ikinfo_size() const {
  return ikinfo_.size();
}
inline void ShowIKFrame::clear_ikinfo() {
  ikinfo_.Clear();
}
inline const ::vmdProto::IKInfo& ShowIKFrame::ikinfo(int index) const {
  return ikinfo_.Get(index);
}
inline ::vmdProto::IKInfo* ShowIKFrame::mutable_ikinfo(int index) {
  return ikinfo_.Mutable(index);
}
inline ::vmdProto::IKInfo* ShowIKFrame::add_ikinfo() {
  return ikinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::IKInfo >&
ShowIKFrame::ikinfo() const {
  return ikinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::IKInfo >*
ShowIKFrame::mutable_ikinfo() {
  return &ikinfo_;
}

// -------------------------------------------------------------------

// BoneFrameTable

// required uint64 id = 1;
inline bool BoneFrameTable::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoneFrameTable::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoneFrameTable::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoneFrameTable::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 BoneFrameTable::id() const {
  return id_;
}
inline void BoneFrameTable::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// repeated .vmdProto.BoneFrame frames = 2;
inline int BoneFrameTable::frames_size() const {
  return frames_.size();
}
inline void BoneFrameTable::clear_frames() {
  frames_.Clear();
}
inline const ::vmdProto::BoneFrame& BoneFrameTable::frames(int index) const {
  return frames_.Get(index);
}
inline ::vmdProto::BoneFrame* BoneFrameTable::mutable_frames(int index) {
  return frames_.Mutable(index);
}
inline ::vmdProto::BoneFrame* BoneFrameTable::add_frames() {
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::BoneFrame >&
BoneFrameTable::frames() const {
  return frames_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::BoneFrame >*
BoneFrameTable::mutable_frames() {
  return &frames_;
}

// -------------------------------------------------------------------

// MorphFrameTable

// required uint64 id = 1;
inline bool MorphFrameTable::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MorphFrameTable::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MorphFrameTable::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MorphFrameTable::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 MorphFrameTable::id() const {
  return id_;
}
inline void MorphFrameTable::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// repeated .vmdProto.MorphFrame frames = 2;
inline int MorphFrameTable::frames_size() const {
  return frames_.size();
}
inline void MorphFrameTable::clear_frames() {
  frames_.Clear();
}
inline const ::vmdProto::MorphFrame& MorphFrameTable::frames(int index) const {
  return frames_.Get(index);
}
inline ::vmdProto::MorphFrame* MorphFrameTable::mutable_frames(int index) {
  return frames_.Mutable(index);
}
inline ::vmdProto::MorphFrame* MorphFrameTable::add_frames() {
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::MorphFrame >&
MorphFrameTable::frames() const {
  return frames_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::MorphFrame >*
MorphFrameTable::mutable_frames() {
  return &frames_;
}

// -------------------------------------------------------------------

// CameraFrameTable

// optional uint64 id = 1;
inline bool CameraFrameTable::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraFrameTable::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraFrameTable::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraFrameTable::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 CameraFrameTable::id() const {
  return id_;
}
inline void CameraFrameTable::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// repeated .vmdProto.CameraFrame frames = 2;
inline int CameraFrameTable::frames_size() const {
  return frames_.size();
}
inline void CameraFrameTable::clear_frames() {
  frames_.Clear();
}
inline const ::vmdProto::CameraFrame& CameraFrameTable::frames(int index) const {
  return frames_.Get(index);
}
inline ::vmdProto::CameraFrame* CameraFrameTable::mutable_frames(int index) {
  return frames_.Mutable(index);
}
inline ::vmdProto::CameraFrame* CameraFrameTable::add_frames() {
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::CameraFrame >&
CameraFrameTable::frames() const {
  return frames_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::CameraFrame >*
CameraFrameTable::mutable_frames() {
  return &frames_;
}

// -------------------------------------------------------------------

// LightFrameTable

// optional uint64 id = 1;
inline bool LightFrameTable::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LightFrameTable::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LightFrameTable::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LightFrameTable::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 LightFrameTable::id() const {
  return id_;
}
inline void LightFrameTable::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// repeated .vmdProto.LightFrame frames = 2;
inline int LightFrameTable::frames_size() const {
  return frames_.size();
}
inline void LightFrameTable::clear_frames() {
  frames_.Clear();
}
inline const ::vmdProto::LightFrame& LightFrameTable::frames(int index) const {
  return frames_.Get(index);
}
inline ::vmdProto::LightFrame* LightFrameTable::mutable_frames(int index) {
  return frames_.Mutable(index);
}
inline ::vmdProto::LightFrame* LightFrameTable::add_frames() {
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::LightFrame >&
LightFrameTable::frames() const {
  return frames_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::LightFrame >*
LightFrameTable::mutable_frames() {
  return &frames_;
}

// -------------------------------------------------------------------

// SelfShadowFrameTable

// optional uint64 id = 1;
inline bool SelfShadowFrameTable::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelfShadowFrameTable::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelfShadowFrameTable::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelfShadowFrameTable::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 SelfShadowFrameTable::id() const {
  return id_;
}
inline void SelfShadowFrameTable::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// repeated .vmdProto.SelfShadowFrame frames = 2;
inline int SelfShadowFrameTable::frames_size() const {
  return frames_.size();
}
inline void SelfShadowFrameTable::clear_frames() {
  frames_.Clear();
}
inline const ::vmdProto::SelfShadowFrame& SelfShadowFrameTable::frames(int index) const {
  return frames_.Get(index);
}
inline ::vmdProto::SelfShadowFrame* SelfShadowFrameTable::mutable_frames(int index) {
  return frames_.Mutable(index);
}
inline ::vmdProto::SelfShadowFrame* SelfShadowFrameTable::add_frames() {
  return frames_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::SelfShadowFrame >&
SelfShadowFrameTable::frames() const {
  return frames_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::SelfShadowFrame >*
SelfShadowFrameTable::mutable_frames() {
  return &frames_;
}

// -------------------------------------------------------------------

// VocaloidMotionData

// required .vmdProto.Header header = 1;
inline bool VocaloidMotionData::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VocaloidMotionData::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VocaloidMotionData::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VocaloidMotionData::clear_header() {
  if (header_ != NULL) header_->::vmdProto::Header::Clear();
  clear_has_header();
}
inline const ::vmdProto::Header& VocaloidMotionData::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::vmdProto::Header* VocaloidMotionData::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::vmdProto::Header;
  return header_;
}
inline ::vmdProto::Header* VocaloidMotionData::release_header() {
  clear_has_header();
  ::vmdProto::Header* temp = header_;
  header_ = NULL;
  return temp;
}

// repeated .vmdProto.IDTag boneIDTable = 2;
inline int VocaloidMotionData::boneidtable_size() const {
  return boneidtable_.size();
}
inline void VocaloidMotionData::clear_boneidtable() {
  boneidtable_.Clear();
}
inline const ::vmdProto::IDTag& VocaloidMotionData::boneidtable(int index) const {
  return boneidtable_.Get(index);
}
inline ::vmdProto::IDTag* VocaloidMotionData::mutable_boneidtable(int index) {
  return boneidtable_.Mutable(index);
}
inline ::vmdProto::IDTag* VocaloidMotionData::add_boneidtable() {
  return boneidtable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >&
VocaloidMotionData::boneidtable() const {
  return boneidtable_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >*
VocaloidMotionData::mutable_boneidtable() {
  return &boneidtable_;
}

// repeated .vmdProto.IDTag morphIDTable = 3;
inline int VocaloidMotionData::morphidtable_size() const {
  return morphidtable_.size();
}
inline void VocaloidMotionData::clear_morphidtable() {
  morphidtable_.Clear();
}
inline const ::vmdProto::IDTag& VocaloidMotionData::morphidtable(int index) const {
  return morphidtable_.Get(index);
}
inline ::vmdProto::IDTag* VocaloidMotionData::mutable_morphidtable(int index) {
  return morphidtable_.Mutable(index);
}
inline ::vmdProto::IDTag* VocaloidMotionData::add_morphidtable() {
  return morphidtable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >&
VocaloidMotionData::morphidtable() const {
  return morphidtable_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >*
VocaloidMotionData::mutable_morphidtable() {
  return &morphidtable_;
}

// repeated .vmdProto.IDTag cameraIDTable = 4;
inline int VocaloidMotionData::cameraidtable_size() const {
  return cameraidtable_.size();
}
inline void VocaloidMotionData::clear_cameraidtable() {
  cameraidtable_.Clear();
}
inline const ::vmdProto::IDTag& VocaloidMotionData::cameraidtable(int index) const {
  return cameraidtable_.Get(index);
}
inline ::vmdProto::IDTag* VocaloidMotionData::mutable_cameraidtable(int index) {
  return cameraidtable_.Mutable(index);
}
inline ::vmdProto::IDTag* VocaloidMotionData::add_cameraidtable() {
  return cameraidtable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >&
VocaloidMotionData::cameraidtable() const {
  return cameraidtable_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >*
VocaloidMotionData::mutable_cameraidtable() {
  return &cameraidtable_;
}

// repeated .vmdProto.IDTag lightIDTable = 5;
inline int VocaloidMotionData::lightidtable_size() const {
  return lightidtable_.size();
}
inline void VocaloidMotionData::clear_lightidtable() {
  lightidtable_.Clear();
}
inline const ::vmdProto::IDTag& VocaloidMotionData::lightidtable(int index) const {
  return lightidtable_.Get(index);
}
inline ::vmdProto::IDTag* VocaloidMotionData::mutable_lightidtable(int index) {
  return lightidtable_.Mutable(index);
}
inline ::vmdProto::IDTag* VocaloidMotionData::add_lightidtable() {
  return lightidtable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >&
VocaloidMotionData::lightidtable() const {
  return lightidtable_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >*
VocaloidMotionData::mutable_lightidtable() {
  return &lightidtable_;
}

// repeated .vmdProto.IDTag selfShadowIDTable = 6;
inline int VocaloidMotionData::selfshadowidtable_size() const {
  return selfshadowidtable_.size();
}
inline void VocaloidMotionData::clear_selfshadowidtable() {
  selfshadowidtable_.Clear();
}
inline const ::vmdProto::IDTag& VocaloidMotionData::selfshadowidtable(int index) const {
  return selfshadowidtable_.Get(index);
}
inline ::vmdProto::IDTag* VocaloidMotionData::mutable_selfshadowidtable(int index) {
  return selfshadowidtable_.Mutable(index);
}
inline ::vmdProto::IDTag* VocaloidMotionData::add_selfshadowidtable() {
  return selfshadowidtable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >&
VocaloidMotionData::selfshadowidtable() const {
  return selfshadowidtable_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::IDTag >*
VocaloidMotionData::mutable_selfshadowidtable() {
  return &selfshadowidtable_;
}

// repeated .vmdProto.BoneFrameTable boneFrameTables = 7;
inline int VocaloidMotionData::boneframetables_size() const {
  return boneframetables_.size();
}
inline void VocaloidMotionData::clear_boneframetables() {
  boneframetables_.Clear();
}
inline const ::vmdProto::BoneFrameTable& VocaloidMotionData::boneframetables(int index) const {
  return boneframetables_.Get(index);
}
inline ::vmdProto::BoneFrameTable* VocaloidMotionData::mutable_boneframetables(int index) {
  return boneframetables_.Mutable(index);
}
inline ::vmdProto::BoneFrameTable* VocaloidMotionData::add_boneframetables() {
  return boneframetables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::BoneFrameTable >&
VocaloidMotionData::boneframetables() const {
  return boneframetables_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::BoneFrameTable >*
VocaloidMotionData::mutable_boneframetables() {
  return &boneframetables_;
}

// repeated .vmdProto.MorphFrameTable morphFrameTables = 8;
inline int VocaloidMotionData::morphframetables_size() const {
  return morphframetables_.size();
}
inline void VocaloidMotionData::clear_morphframetables() {
  morphframetables_.Clear();
}
inline const ::vmdProto::MorphFrameTable& VocaloidMotionData::morphframetables(int index) const {
  return morphframetables_.Get(index);
}
inline ::vmdProto::MorphFrameTable* VocaloidMotionData::mutable_morphframetables(int index) {
  return morphframetables_.Mutable(index);
}
inline ::vmdProto::MorphFrameTable* VocaloidMotionData::add_morphframetables() {
  return morphframetables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::MorphFrameTable >&
VocaloidMotionData::morphframetables() const {
  return morphframetables_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::MorphFrameTable >*
VocaloidMotionData::mutable_morphframetables() {
  return &morphframetables_;
}

// repeated .vmdProto.CameraFrameTable cameraFrameTables = 9;
inline int VocaloidMotionData::cameraframetables_size() const {
  return cameraframetables_.size();
}
inline void VocaloidMotionData::clear_cameraframetables() {
  cameraframetables_.Clear();
}
inline const ::vmdProto::CameraFrameTable& VocaloidMotionData::cameraframetables(int index) const {
  return cameraframetables_.Get(index);
}
inline ::vmdProto::CameraFrameTable* VocaloidMotionData::mutable_cameraframetables(int index) {
  return cameraframetables_.Mutable(index);
}
inline ::vmdProto::CameraFrameTable* VocaloidMotionData::add_cameraframetables() {
  return cameraframetables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::CameraFrameTable >&
VocaloidMotionData::cameraframetables() const {
  return cameraframetables_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::CameraFrameTable >*
VocaloidMotionData::mutable_cameraframetables() {
  return &cameraframetables_;
}

// repeated .vmdProto.LightFrameTable lightFrameTables = 10;
inline int VocaloidMotionData::lightframetables_size() const {
  return lightframetables_.size();
}
inline void VocaloidMotionData::clear_lightframetables() {
  lightframetables_.Clear();
}
inline const ::vmdProto::LightFrameTable& VocaloidMotionData::lightframetables(int index) const {
  return lightframetables_.Get(index);
}
inline ::vmdProto::LightFrameTable* VocaloidMotionData::mutable_lightframetables(int index) {
  return lightframetables_.Mutable(index);
}
inline ::vmdProto::LightFrameTable* VocaloidMotionData::add_lightframetables() {
  return lightframetables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::LightFrameTable >&
VocaloidMotionData::lightframetables() const {
  return lightframetables_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::LightFrameTable >*
VocaloidMotionData::mutable_lightframetables() {
  return &lightframetables_;
}

// repeated .vmdProto.SelfShadowFrameTable selfShadowFrameTables = 11;
inline int VocaloidMotionData::selfshadowframetables_size() const {
  return selfshadowframetables_.size();
}
inline void VocaloidMotionData::clear_selfshadowframetables() {
  selfshadowframetables_.Clear();
}
inline const ::vmdProto::SelfShadowFrameTable& VocaloidMotionData::selfshadowframetables(int index) const {
  return selfshadowframetables_.Get(index);
}
inline ::vmdProto::SelfShadowFrameTable* VocaloidMotionData::mutable_selfshadowframetables(int index) {
  return selfshadowframetables_.Mutable(index);
}
inline ::vmdProto::SelfShadowFrameTable* VocaloidMotionData::add_selfshadowframetables() {
  return selfshadowframetables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::SelfShadowFrameTable >&
VocaloidMotionData::selfshadowframetables() const {
  return selfshadowframetables_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::SelfShadowFrameTable >*
VocaloidMotionData::mutable_selfshadowframetables() {
  return &selfshadowframetables_;
}

// repeated .vmdProto.ShowIKFrame showIKFrames = 12;
inline int VocaloidMotionData::showikframes_size() const {
  return showikframes_.size();
}
inline void VocaloidMotionData::clear_showikframes() {
  showikframes_.Clear();
}
inline const ::vmdProto::ShowIKFrame& VocaloidMotionData::showikframes(int index) const {
  return showikframes_.Get(index);
}
inline ::vmdProto::ShowIKFrame* VocaloidMotionData::mutable_showikframes(int index) {
  return showikframes_.Mutable(index);
}
inline ::vmdProto::ShowIKFrame* VocaloidMotionData::add_showikframes() {
  return showikframes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmdProto::ShowIKFrame >&
VocaloidMotionData::showikframes() const {
  return showikframes_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmdProto::ShowIKFrame >*
VocaloidMotionData::mutable_showikframes() {
  return &showikframes_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmdProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vme_2eproto__INCLUDED
